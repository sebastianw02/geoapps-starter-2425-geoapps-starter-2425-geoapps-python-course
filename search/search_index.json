{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Strona g\u0142\u00f3wna","text":"<p>Witam Pa\u0144stwa na zaj\u0119ciach z przedmiotu Programowanie aplikacji geoinformatycznych (Python) dla kierunku Geoinformatyka - rok 3, semestr 6 gdzie poznamy podstawow\u0105 sk\u0142adni\u0119 Pythona, a nast\u0119pnie poprzez projekty nauczymy si\u0119 przetwarza\u0107 i wizualizowa\u0107 dane przestrzenne.</p>"},{"location":"#informacje-o-przedmocie","title":"\ud83d\udccc Informacje o przedmocie","text":"<ul> <li>Prowadz\u0105cy: Jakub Staszel</li> <li>Forma zaj\u0119\u0107: \u0107wiczenia laboratoryjne</li> <li>Liczba godzin: 2h 15 min x 30</li> <li>Miejsce: Sala 374, A0</li> </ul>"},{"location":"#cel-kursu","title":"\ud83c\udfaf Cel kursu","text":"<p>Po uko\u0144czeniu kursu uczestnicy b\u0119d\u0105 potrafili:</p> <ul> <li>Wykorzystywa\u0107 Python do analizy i przetwarzania danych przestrzennych,</li> <li>Korzysta\u0107 z bibliotek takich jak GeoPandas, Rasterio, Fiona czy Shapely,</li> <li>Tworzy\u0107 interaktywne mapy przy u\u017cyciu Folium i Streamlit,</li> <li>Automatyzowa\u0107 procesy GIS w Pythonie.</li> </ul>"},{"location":"#forma-zaliczenia","title":"\ud83d\udcdd Forma zaliczenia","text":"<p>Aby zaliczy\u0107 kurs, uczestnicy musz\u0105:</p> <ol> <li>Odda\u0107 wszystkie wykonane \u0107wiczenia,</li> <li>Wykona\u0107 projekt semestralny,</li> <li>Doda\u0107 dokumentacj\u0119 projektu w MkDocs,</li> <li>Przedstawi\u0107 dzia\u0142aj\u0105cy projekt na ostatnich zaj\u0119ciach.</li> </ol> <p>Nieobecno\u015bci: mo\u017cliwe 2 nieobecno\u015bci nieusprawiedliwione, p\u00f3\u017aniej wymagane usprawiedliwienie.</p>"},{"location":"#projekty","title":"\ud83d\ude80 Projekty","text":"<ul> <li>Tematy projekt\u00f3w zostan\u0105 podane w p\u00f3\u017aniejszym terminie,</li> <li>Projekty b\u0119d\u0105 realizowane w grupach 2 lub 3 osobowych,</li> <li>Je\u015bli kto\u015b ma w\u0142asny pomys\u0142 na projekt, mo\u017cna go zrealizowa\u0107 w ramach tych zaj\u0119\u0107.</li> </ul>"},{"location":"#wymagania","title":"\ud83d\udee0\ufe0f Wymagania","text":"<ul> <li>Znajomo\u015b\u0107 podstaw Python, GIS i git,</li> <li>Konto na GitHub,</li> <li>Umiej\u0119tno\u015b\u0107 pracy z terminalem i docker.</li> </ul>"},{"location":"#kontakt","title":"\ud83d\udce2 Kontakt","text":"<p>W razie pyta\u0144, prosz\u0119 o kontakt na Teams lub poprzez email - jstaszel@agh.edu.pl.</p>"},{"location":"zaj0/srod-lok/","title":"\ud83d\udccc \u015arodowisko lokalne do pracy z Pythonem w Dockerze","text":""},{"location":"zaj0/srod-lok/#1-wprowadzenie","title":"\ud83c\udfc1 1. Wprowadzenie","text":"<p>Na tych zaj\u0119ciach skonfigurujemy \u015brodowisko do pracy z Pythonem w kontenerze Docker. Dzi\u0119ki temu ka\u017cdy b\u0119dzie mia\u0142 sp\u00f3jne, odizolowane \u015brodowisko, w kt\u00f3rym mo\u017cna instalowa\u0107 pakiety, uruchamia\u0107 skrypty i pracowa\u0107 z Pythonem interaktywnie z poziomu IDE.</p>"},{"location":"zaj0/srod-lok/#2-instalacja-dockera","title":"\ud83d\udee0 2. Instalacja Dockera","text":"<p>Docker pozwala na uruchamianie kontener\u00f3w, kt\u00f3re dzia\u0142aj\u0105 jako lekkie, odizolowane \u015brodowiska.</p>"},{"location":"zaj0/srod-lok/#21-instalacja-na-windowsmacoslinux","title":"\ud83d\udce5 2.1. Instalacja na Windows/macOS/Linux","text":"<ol> <li>Pobierz i zainstaluj Docker Desktop: Pobierz Docker</li> <li>Sprawd\u017a instalacj\u0119:     <pre><code>docker --version\n</code></pre></li> <li>Upewnij si\u0119, \u017ce Docker jest uruchomiony.</li> </ol>"},{"location":"zaj0/srod-lok/#3-tworzenie-srodowiska-w-dockerze","title":"\ud83d\udd27 3. Tworzenie \u015brodowiska w Dockerze","text":""},{"location":"zaj0/srod-lok/#31-tworzenie-folderu-projektu","title":"\ud83d\udcc2 3.1. Tworzenie folderu projektu","text":"<p>Wybierz katalog, w kt\u00f3rym chcesz pracowa\u0107: <pre><code>mkdir geoapps &amp;&amp; cd geoapps\n</code></pre></p>"},{"location":"zaj0/srod-lok/#32-tworzenie-pliku-dockerfile","title":"\ud83d\udcdc 3.2. Tworzenie pliku <code>Dockerfile</code>","text":"<p>Stw\u00f3rz plik <code>Dockerfile</code> i dodaj nast\u0119puj\u0105c\u0105 zawarto\u015b\u0107: <pre><code>FROM condaforge/mambaforge:latest\n\nWORKDIR /app\n\nCMD [\"/bin/bash\", \"-l\"]\n</code></pre></p>"},{"location":"zaj0/srod-lok/#33-tworzenie-pliku-konfiguracyjnego-vs-code","title":"\u2699\ufe0f 3.3. Tworzenie pliku konfiguracyjnego VS Code","text":"<p>Aby u\u0142atwi\u0107 integracj\u0119 Dockera z VS Code, utw\u00f3rz folder <code>.devcontainer</code> w katalogu projektu i w nim plik <code>devcontainer.json</code>: <pre><code>{\n    \"name\": \"Python Dev Container\",\n    \"build\": {\n        \"dockerfile\": \"../Dockerfile\"\n    },\n    \"workspaceFolder\": \"/app\",\n    \"mounts\": [\n        \"source=${localWorkspaceFolder},target=/app,type=bind,consistency=cached\"\n    ],\n    \"customizations\": {\n        \"vscode\": {\n            \"settings\": {\n                \"terminal.integrated.defaultProfile.linux\": \"bash\"\n            },\n            \"extensions\": [\n                \"ms-python.python\",\n                \"ms-vscode-remote.remote-containers\",\n                \"ms-vscode-remote.dev-containers\"\n            ]\n        }\n    }\n}\n</code></pre></p>"},{"location":"zaj0/srod-lok/#34-budowanie-obrazu-dockera","title":"\ud83d\ude80 3.4. Budowanie obrazu Dockera","text":"<pre><code>docker build -t python-env .\n</code></pre>"},{"location":"zaj0/srod-lok/#35-uruchamianie-kontenera","title":"\ud83d\udd04 3.5. Uruchamianie kontenera","text":"<p>Uruchom kontener w trybie interaktywnym i pod\u0142\u0105cz lokalny katalog: <pre><code>docker run -it -v .:/app python-env /bin/bash -l\n</code></pre> Dzi\u0119ki temu wszystkie zmiany w katalogu <code>geoapps</code> b\u0119d\u0105 widoczne w kontenerze.</p>"},{"location":"zaj0/srod-lok/#4-konfiguracja-ide-vs-code-z-dockerem-i-mambaforge","title":"\ud83d\udda5\ufe0f 4. Konfiguracja IDE (VS Code) z Dockerem i Mambaforge","text":"<p>Aby po\u0142\u0105czy\u0107 si\u0119 z kontenerem w VS Code:</p> <ol> <li>Zainstaluj rozszerzenie \u279d <code>Remote - Containers</code> lub <code>Dev Container</code>.</li> <li>Otw\u00f3rz katalog projektu w VS Code.</li> <li>Kliknij <code>Ctrl+Shift+P</code> i wybierz <code>Remote-Containers: Reopen in Container</code>.</li> <li>VS Code uruchomi kontener i otworzy projekt w odizolowanym \u015brodowisku.</li> <li>Otw\u00f3rz terminal w VS Code (<code>Ctrl+~</code>) i sprawd\u017a aktywne \u015brodowisko Conda:    <pre><code>conda info --envs\n</code></pre>    Powiniene\u015b zobaczy\u0107, \u017ce aktywowane jest \u015brodowisko <code>base</code>.</li> </ol>"},{"location":"zaj0/srod-lok/#5-instalacja-pakietow-wewnatrz-kontenera","title":"\ud83d\udce6 5. Instalacja pakiet\u00f3w wewn\u0105trz kontenera","text":"<p>Gdy kontener jest uruchomiony, mo\u017cna instalowa\u0107 pakiety za pomoc\u0105 mamby: <pre><code>micromamba install -y -n base -c conda-forge matplotlib geopandas\n</code></pre> Pakiety mo\u017cna te\u017c instalowa\u0107 przez pip: <pre><code>pip install requests\n</code></pre></p>"},{"location":"zaj0/srod-lok/#6-uruchamianie-skryptow","title":"\ud83c\udfc3\u200d\u2642\ufe0f 6. Uruchamianie skrypt\u00f3w","text":"<p>Utw\u00f3rz plik <code>main.py</code>:</p> <pre><code>import this\n</code></pre> <p>Uruchom go w kontenerze:</p> <pre><code>python main.py\n</code></pre> <p>Zadanie: Zr\u00f3b zrzut ekranu (screenshot) pokazuj\u0105cy wynik dzia\u0142ania tego skryptu w terminalu kontenera i wy\u015blij go na czat. \ud83d\udcf8</p> Jak dzia\u0142a Docker? <p>Docker to platforma do uruchamiania aplikacji w kontenerach, czyli lekkich, odizolowanych \u015brodowiskach, kt\u00f3re zawieraj\u0105 wszystko, co jest potrzebne do dzia\u0142ania aplikacji (kod, zale\u017cno\u015bci, konfiguracj\u0119). Dzi\u0119ki temu aplikacje dzia\u0142aj\u0105 identycznie niezale\u017cnie od systemu operacyjnego.</p> <ul> <li> <p>Ka\u017cdy kontener dzia\u0142a jak mini-wirtualna maszyna, ale jest l\u017cejszy i bardziej wydajny.</p> </li> <li> <p>Docker u\u017cywa obraz\u00f3w \u2013 predefiniowanych pakiet\u00f3w, kt\u00f3re mo\u017cna wielokrotnie uruchamia\u0107 jako kontenery.</p> </li> <li> <p>Izolacja pozwala unikn\u0105\u0107 konflikt\u00f3w zale\u017cno\u015bci i r\u00f3\u017cnic mi\u0119dzy \u015brodowiskami.</p> </li> </ul> Po co nam Docker? <p>Docker jest przydatny, poniewa\u017c:</p> <ul> <li> <p>Eliminuje problem \u201eu mnie dzia\u0142a\u201d \u2013 \u015brodowisko w kontenerze jest identyczne na ka\u017cdym komputerze.</p> </li> <li> <p>\u0141atwo mo\u017cna wsp\u00f3\u0142dzieli\u0107 \u015brodowiska \u2013 wystarczy przekaza\u0107 pliki Dockerfile i devcontainer.json.</p> </li> <li> <p>Szybkie wdra\u017canie \u2013 nowe \u015brodowisko mo\u017cna uruchomi\u0107 w kilka sekund.</p> </li> <li> <p>U\u0142atwia prac\u0119 zespo\u0142ow\u0105 \u2013 ka\u017cdy programista ma t\u0119 sam\u0105 konfiguracj\u0119.</p> </li> <li> <p>Mo\u017cna uruchamia\u0107 aplikacje w chmurze i na serwerach bez zmian w kodzie.</p> </li> </ul> <p>Docker to idealne narz\u0119dzie dla programist\u00f3w, kt\u00f3rzy chc\u0105 pracowa\u0107 w powtarzalnym i stabilnym \u015brodowisku! \ud83d\ude80</p>"},{"location":"zaj01/git/","title":"\ud83c\udf1e GIT - kontrola wersji","text":"<p>W tym module poznasz podstawowe informacje o systemie kontroli wersji git oraz nauczysz si\u0119, jak po\u0142\u0105czy\u0107 si\u0119 z repozytorium zdalnym. Om\u00f3wimy instalacj\u0119 gita, konfiguracj\u0119 u\u017cytkownika, klonowanie repozytorium oraz wysy\u0142anie i pobieranie zmian.</p>"},{"location":"zaj01/git/#czym-jest-git","title":"Czym jest git?","text":"<p>Git to rozproszony system kontroli wersji, kt\u00f3ry umo\u017cliwia \u015bledzenie zmian w plikach, wsp\u00f3\u0142prac\u0119 mi\u0119dzy programistami i zarz\u0105dzanie kodem \u017ar\u00f3d\u0142owym w spos\u00f3b efektywny i bezpieczny. Jest szeroko stosowany w projektach open-source oraz w firmach na ca\u0142ym \u015bwiecie.</p>"},{"location":"zaj01/git/#kluczowe-cechy-gita","title":"Kluczowe cechy gita","text":"<ul> <li>Rozproszony system \u2013 ka\u017cdy u\u017cytkownik ma pe\u0142n\u0105 kopi\u0119 repozytorium,</li> <li>Wersjonowanie \u2013 \u015bledzenie zmian i mo\u017cliwo\u015b\u0107 powrotu do wcze\u015bniejszych wersji kodu,</li> <li>Ga\u0142\u0119zie (branches) \u2013 mo\u017cliwo\u015b\u0107 pracy nad r\u00f3\u017cnymi wersjami kodu r\u00f3wnocze\u015bnie,</li> <li>Integracja z platformami zdalnymi \u2013 np. GitHub, GitLab, Bitbucket.</li> </ul>"},{"location":"zaj01/git/#poaczenie-z-repozytorium-zdalnym","title":"Po\u0142\u0105czenie z repozytorium zdalnym","text":"<p>Aby po\u0142\u0105czy\u0107 si\u0119 z repozytorium zdalnym, musisz wykona\u0107 nast\u0119puj\u0105ce kroki:</p>"},{"location":"zaj01/git/#1-instalacja-gita","title":"1. Instalacja gita","text":"<p>Je\u015bli nie masz jeszcze gita, mo\u017cesz go zainstalowa\u0107:</p> <ul> <li> <p>Linux (Ubuntu/Debian): <pre><code>sudo apt update\nsudo apt install git\n</code></pre></p> </li> <li> <p>Windows: Pobierz instalator ze strony git-scm.com i zainstaluj.</p> </li> <li> <p>macOS: <pre><code>brew install git\n</code></pre></p> </li> </ul> <p>Po instalacji sprawd\u017a wersj\u0119: <pre><code>git --version\n</code></pre></p>"},{"location":"zaj01/git/#2-konfiguracja-uzytkownika","title":"2. Konfiguracja u\u017cytkownika","text":"<p>Przed rozpocz\u0119ciem pracy skonfiguruj swoje dane: <pre><code>git config --global user.name \"Twoje Imi\u0119\"\ngit config --global user.email \"twoj@email.com\"\n</code></pre></p> <p>Link do Twojego repozytorium zdalnego dostaniesz od prowadz\u0105cego zaj\u0119cia!</p>"},{"location":"zaj01/git/#3-klonowanie-repozytorium-zdalnego","title":"3. Klonowanie repozytorium zdalnego","text":"<p>Je\u015bli chcesz pobra\u0107 istniej\u0105ce repozytorium, u\u017cyj komendy: <pre><code>git clone https://github.com/uzytkownik/nazwa-repozytorium.git\n</code></pre> Lub je\u015bli u\u017cywasz SSH: <pre><code>git clone git@github.com:uzytkownik/nazwa-repozytorium.git\n</code></pre></p>"},{"location":"zaj01/git/#4-poaczenie-istniejacego-katalogu-z-repozytorium","title":"4. Po\u0142\u0105czenie istniej\u0105cego katalogu z repozytorium","text":"<p>Je\u015bli masz ju\u017c lokalny projekt i chcesz po\u0142\u0105czy\u0107 go z repozytorium zdalnym: <pre><code>git init\n</code></pre> Dodaj zdalne repozytorium: <pre><code>git remote add origin https://github.com/uzytkownik/nazwa-repozytorium.git\n</code></pre> Sprawd\u017a, czy po\u0142\u0105czenie zosta\u0142o poprawnie dodane: <pre><code>git remote -v\n</code></pre></p>"},{"location":"zaj01/git/#5-wysyanie-zmian-do-repozytorium","title":"5. Wysy\u0142anie zmian do repozytorium","text":"<p>Dodaj pliki do wersjonowania: <pre><code>git add .\n</code></pre> Zatwierd\u017a zmiany: <pre><code>git commit -m \"Pierwszy commit\"\n</code></pre> Wypchnij zmiany na zdalne repozytorium: <pre><code>git push -u origin main\n</code></pre></p>"},{"location":"zaj01/git/#6-pobieranie-zmian-z-repozytorium","title":"6. Pobieranie zmian z repozytorium","text":"<p>Aby pobra\u0107 najnowsze zmiany z repozytorium: <pre><code>git pull origin main\n</code></pre></p> <p>Teraz masz podstawow\u0105 wiedz\u0119 na temat gita i po\u0142\u0105czenia si\u0119 z repozytorium zdalnym. Mo\u017cesz rozpocz\u0105\u0107 prac\u0119 nad swoimi zadaniami!</p> <p>Nowoczesne IDE maj\u0105 modu\u0142y do obs\u0142ugi kontroli wersji, wi\u0119c mo\u017cemy u\u017cywa\u0107 interfejsu graficznego zamiast polece\u0144 w terminalu.</p> Praca z ga\u0142\u0119ziami Revert i Reset Stash \u2013 przechowanie tymczasowych zmian Sprawdzanie historii commit\u00f3w Usuwanie plik\u00f3w z repozytorium i <code>.gitignore</code> git LFS (Large File Storage)"},{"location":"zaj01/git/#gaezie-branches","title":"Ga\u0142\u0119zie (branches)","text":"<p>Ga\u0142\u0119zie pozwalaj\u0105 na jednoczesne rozwijanie r\u00f3\u017cnych funkcji projektu bez wp\u0142ywania na g\u0142\u00f3wn\u0105 wersj\u0119 kodu. To bardzo u\u017cyteczne, gdy kilka os\u00f3b pracuje nad r\u00f3\u017cnymi aspektami projektu lub gdy testujesz nowe funkcjonalno\u015bci przed ich wdro\u017ceniem do g\u0142\u00f3wnej wersji kodu.</p> <p>Tworzenie nowej ga\u0142\u0119zi: <pre><code>git branch nazwa-galezi\n</code></pre> Tworzy now\u0105 ga\u0142\u0105\u017a, ale pozostajesz na obecnej.</p> <p>Prze\u0142\u0105czanie si\u0119 na now\u0105 ga\u0142\u0105\u017a: <pre><code>git checkout nazwa-galezi\n</code></pre> Lub u\u017cywaj\u0105c nowoczesnej wersji polecenia: <pre><code>git switch nazwa-galezi\n</code></pre></p> <p>Tworzenie i przej\u015bcie na now\u0105 ga\u0142\u0105\u017a jednocze\u015bnie: <pre><code>git checkout -b nazwa-galezi\n</code></pre> Dzi\u0119ki temu unikasz konieczno\u015bci tworzenia ga\u0142\u0119zi i prze\u0142\u0105czania si\u0119 na ni\u0105 osobno.</p> <p>Merging (scalanie ga\u0142\u0119zi): Aby scali\u0107 zmiany z innej ga\u0142\u0119zi do g\u0142\u00f3wnej (<code>main</code>): <pre><code>git checkout main\n</code></pre> <pre><code>git merge nazwa-galezi\n</code></pre> Scalanie przydaje si\u0119, gdy zako\u0144czysz prace nad now\u0105 funkcjonalno\u015bci\u0105 i chcesz doda\u0107 j\u0105 do g\u0142\u00f3wnej wersji kodu.</p>"},{"location":"zaj01/git/#wycofywanie-zmian","title":"Wycofywanie zmian","text":"<p>B\u0142\u0119dy zdarzaj\u0105 si\u0119 ka\u017cdemu. Dlatego git oferuje kilka metod na ich cofni\u0119cie.</p> <p>Cofni\u0119cie ostatniego commita: <pre><code>git revert HEAD\n</code></pre> Tworzy nowy commit cofaj\u0105cy zmiany z poprzedniego. Jest to bezpieczna metoda, poniewa\u017c nie usuwa historii.</p> <p>Je\u015bli chcesz ca\u0142kowicie usun\u0105\u0107 commit: <pre><code>git reset --hard HEAD~1\n</code></pre> Ta opcja mo\u017ce by\u0107 ryzykowna, bo usunie lokalne zmiany bez mo\u017cliwo\u015bci ich przywr\u00f3cenia.</p> <p>Usuni\u0119cie zmian w plikach przed commitem: <pre><code>git checkout -- nazwa-pliku\n</code></pre> Przywraca wersj\u0119 pliku do ostatniego stanu w repozytorium. Przydatne, je\u015bli zmieni\u0142e\u015b plik przez pomy\u0142k\u0119.</p>"},{"location":"zaj01/git/#przechowywanie-tymczasowych-zmian-stash","title":"Przechowywanie tymczasowych zmian (stash)","text":"<p>Czasami pracujemy nad jak\u0105\u015b zmian\u0105, ale musimy pilnie prze\u0142\u0105czy\u0107 si\u0119 na inn\u0105 ga\u0142\u0105\u017a. W takich przypadkach mo\u017cemy u\u017cy\u0107 <code>stash</code>.</p> <p>Schowanie zmian: <pre><code>git stash\n</code></pre> To powoduje zapisanie bie\u017c\u0105cych zmian na stosie i przywr\u00f3cenie plik\u00f3w do stanu z ostatniego commita.</p> <p>Przywr\u00f3cenie ostatniego stasha: <pre><code>git stash pop\n</code></pre> Dzi\u0119ki temu odzyskujesz zapisane zmiany.</p>"},{"location":"zaj01/git/#historia-commitow","title":"Historia commit\u00f3w","text":"<p>Historia commit\u00f3w pomaga w \u015bledzeniu zmian w kodzie, co jest szczeg\u00f3lnie przydatne w zespo\u0142ach.</p> <p>Podstawowa historia commit\u00f3w: <pre><code>git log\n</code></pre></p> <p>Skr\u00f3cona i czytelniejsza wersja: <pre><code>git log --oneline --graph --all\n</code></pre> Pozwala szybko zobaczy\u0107 struktur\u0119 commit\u00f3w i ich relacje.</p>"},{"location":"zaj01/git/#gitignore","title":".gitignore","text":"<p>Nie zawsze chcemy, aby dany plik by\u0142 cz\u0119\u015bci\u0105 repozytorium.</p> <p>Usuni\u0119cie pliku z repozytorium i lokalnego systemu plik\u00f3w: <pre><code>git rm nazwa-pliku\n</code></pre></p> <p>Usuni\u0119cie pliku tylko z repozytorium, ale zachowanie go lokalnie: <pre><code>git rm --cached nazwa-pliku\n</code></pre> To przydatne, je\u015bli przypadkowo dodali\u015bmy do repozytorium plik, kt\u00f3ry nie powinien si\u0119 tam znale\u017a\u0107 (np. plik konfiguracyjny).</p> <p><code>.gitignore</code> Plik <code>.gitignore</code> pozwala ignorowa\u0107 okre\u015blone pliki i katalogi, aby nie by\u0142y one dodawane do repozytorium.</p> <p>Przyk\u0142ad <code>.gitignore</code>: <pre><code># Ignorowanie plik\u00f3w tymczasowych edytora\n*.swp\n*.swo\n\n# Ignorowanie katalogu build\n/build/\n\n# Ignorowanie plik\u00f3w konfiguracyjnych\nconfig.yaml\n.env\n</code></pre> Plik <code>.gitignore</code> powinien by\u0107 umieszczony w g\u0142\u00f3wnym katalogu repozytorium.</p>"},{"location":"zaj01/git/#git-lfs","title":"git LFS","text":"<p>Je\u015bli pracujesz z du\u017cymi plikami, git mo\u017ce nie by\u0107 optymalny do ich przechowywania. Git LFS (Large File Storage) to rozszerzenie gita, kt\u00f3re pozwala przechowywa\u0107 du\u017ce pliki osobno od kodu \u017ar\u00f3d\u0142owego.</p> <p>Instalacja git LFS: <pre><code># Na systemach Linux/macOS\ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nsudo apt install git-lfs\n\n# Na Windows\nchoco install git-lfs\n</code></pre></p> <p>U\u017cywanie git LFS: <pre><code>git lfs install\n</code></pre> Nast\u0119pnie dodaj typ plik\u00f3w, kt\u00f3re maj\u0105 by\u0107 przechowywane w LFS: <pre><code>git lfs track \"*.psd\"\n</code></pre> To oznacza, \u017ce pliki <code>.psd</code> b\u0119d\u0105 przechowywane w git LFS zamiast w standardowym repozytorium gita.</p> <p>Dzi\u0119ki temu repozytorium pozostaje lekkie, a du\u017ce pliki s\u0105 przechowywane w zoptymalizowany spos\u00f3b.</p>"},{"location":"zaj01/instrukcje_petle/","title":"Instrukcje warunkowe i p\u0119tle w Pythonie","text":""},{"location":"zaj01/instrukcje_petle/#wprowadzenie","title":"Wprowadzenie","text":"<p>W Pythonie istnieje kilka podstawowych mechanizm\u00f3w sterowania przep\u0142ywem programu. Najwa\u017cniejsze z nich to:</p> <ul> <li>Instrukcje warunkowe (<code>if</code>, <code>elif</code>, <code>else</code>) \u2013 pozwalaj\u0105 na podejmowanie decyzji w kodzie,</li> <li>P\u0119tle (<code>for</code>, <code>while</code>) \u2013 umo\u017cliwiaj\u0105 wielokrotne wykonanie kodu,</li> <li>Instrukcje steruj\u0105ce (<code>break</code>, <code>continue</code>, <code>pass</code>) \u2013 daj\u0105 wi\u0119ksz\u0105 kontrol\u0119 nad dzia\u0142aniem p\u0119tli.</li> </ul>"},{"location":"zaj01/instrukcje_petle/#instrukcje-warunkowe-if-elif-else","title":"Instrukcje warunkowe (<code>if</code>, <code>elif</code>, <code>else</code>)","text":"<p>Instrukcje warunkowe pozwalaj\u0105 na wykonanie okre\u015blonego kodu tylko wtedy, gdy spe\u0142niony jest dany warunek.</p>"},{"location":"zaj01/instrukcje_petle/#skadnia-if","title":"Sk\u0142adnia <code>if</code>","text":"<p><pre><code>x = 10\nif x &gt; 5:\n    print(\"x jest wi\u0119ksze ni\u017c 5\")\n</code></pre> Je\u015bli warunek jest prawdziwy (<code>True</code>), wykonywany jest kod znajduj\u0105cy si\u0119 wewn\u0105trz bloku <code>if</code>.</p>"},{"location":"zaj01/instrukcje_petle/#skadnia-if-else","title":"Sk\u0142adnia <code>if-else</code>","text":"<p><pre><code>x = 3\nif x &gt; 5:\n    print(\"x jest wi\u0119ksze ni\u017c 5\")\nelse:\n    print(\"x jest mniejsze lub r\u00f3wne 5\")\n</code></pre> Blok <code>else</code> wykona si\u0119, gdy warunek w <code>if</code> nie zostanie spe\u0142niony.</p>"},{"location":"zaj01/instrukcje_petle/#skadnia-if-elif-else","title":"Sk\u0142adnia <code>if-elif-else</code>","text":"<p>Je\u015bli mamy wi\u0119cej ni\u017c dwa przypadki, mo\u017cemy u\u017cy\u0107 <code>elif</code>: <pre><code>x = 7\nif x &gt; 10:\n    print(\"x jest wi\u0119ksze ni\u017c 10\")\nelif x &gt; 5:\n    print(\"x jest wi\u0119ksze ni\u017c 5, ale nie wi\u0119ksze ni\u017c 10\")\nelse:\n    print(\"x jest mniejsze lub r\u00f3wne 5\")\n</code></pre></p>"},{"location":"zaj01/instrukcje_petle/#operatory-logiczne-w-warunkach","title":"Operatory logiczne w warunkach","text":"<p>Warunki mog\u0105 by\u0107 \u0142\u0105czone przy u\u017cyciu operator\u00f3w logicznych: - <code>and</code> \u2013 oba warunki musz\u0105 by\u0107 prawdziwe, - <code>or</code> \u2013 przynajmniej jeden warunek musi by\u0107 prawdziwy, - <code>not</code> \u2013 negacja warunku.</p> <p>Przyk\u0142ad: <pre><code>x = 8\ny = 15\nif x &gt; 5 and y &lt; 20:\n    print(\"Oba warunki s\u0105 spe\u0142nione\")\n</code></pre></p>"},{"location":"zaj01/instrukcje_petle/#petle-w-pythonie","title":"P\u0119tle w Pythonie","text":"<p>P\u0119tle pozwalaj\u0105 na wielokrotne wykonanie danego fragmentu kodu.</p>"},{"location":"zaj01/instrukcje_petle/#petla-for","title":"P\u0119tla <code>for</code>","text":"<p>P\u0119tla <code>for</code> iteruje po sekwencjach, np. listach, krotkach, ci\u0105gach znak\u00f3w: <pre><code>imiona = [\"Jan\", \"Maria\", \"Piotr\"]\nfor imie in imiona:\n    print(imie)\n</code></pre></p>"},{"location":"zaj01/instrukcje_petle/#iterowanie-po-indeksach","title":"Iterowanie po indeksach","text":"<p>Mo\u017cemy iterowa\u0107 po indeksach przy u\u017cyciu <code>range()</code>: <pre><code>for i in range(5):\n    print(f\"Iteracja numer {i}\")\n</code></pre></p>"},{"location":"zaj01/instrukcje_petle/#iterowanie-po-kluczach-sownika","title":"Iterowanie po kluczach s\u0142ownika","text":"<pre><code>osoba = {\"imie\": \"Jan\", \"wiek\": 30}\nfor klucz in osoba:\n    print(f\"{klucz}: {osoba[klucz]}\")\n</code></pre>"},{"location":"zaj01/instrukcje_petle/#petla-while","title":"P\u0119tla <code>while</code>","text":"<p>P\u0119tla <code>while</code> wykonuje kod tak d\u0142ugo, jak d\u0142ugo warunek jest prawdziwy: <pre><code>x = 0\nwhile x &lt; 5:\n    print(f\"x = {x}\")\n    x += 1\n</code></pre></p> <p>P\u0119tle <code>while</code> mog\u0105 prowadzi\u0107 do niesko\u0144czonego wykonania, je\u015bli warunek nigdy nie stanie si\u0119 fa\u0142szywy: <pre><code>while True:\n    odpowiedz = input(\"Czy chcesz zako\u0144czy\u0107? (tak/nie): \")\n    if odpowiedz == \"tak\":\n        break  # Przerwanie p\u0119tli\n</code></pre></p>"},{"location":"zaj01/instrukcje_petle/#instrukcje-sterujace-break-continue-pass","title":"Instrukcje steruj\u0105ce <code>break</code>, <code>continue</code>, <code>pass</code>","text":"<p><code>break</code> \u2013 przerywanie p\u0119tli <pre><code>for liczba in range(10):\n    if liczba == 5:\n        break  # Przerywa p\u0119tl\u0119, gdy liczba wynosi 5\n    print(liczba)\n</code></pre></p> <p><code>continue</code> \u2013 pomini\u0119cie iteracji <pre><code>for liczba in range(5):\n    if liczba == 2:\n        continue  # Pomija tylko t\u0119 iteracj\u0119\n    print(liczba)\n</code></pre></p> <p><code>pass</code> \u2013 pusta instrukcja (placeholder) Czasem musimy zostawi\u0107 pusty blok kodu bez b\u0142\u0119du sk\u0142adni: <pre><code>if True:\n    pass  # Tymczasowy kod\n</code></pre></p>"},{"location":"zaj01/instrukcje_petle/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Napisz program, kt\u00f3ry iteruje przez list\u0119 imion u\u017cywaj\u0105c p\u0119tli <code>for</code> oraz funkcji <code>enumerate()</code>, aby wy\u015bwietli\u0107 indeks ka\u017cdego imienia wraz z samym imieniem. </li> <li>Stw\u00f3rz przyk\u0142ady dla test\u00f3w <code>if</code>: <ul> <li>Gdzie wyst\u0105pi\u0105 dwa warunki - napisz program sprawdzaj\u0105cy czy dana liczba jest dodatnia i parzysta. Je\u015bli tak, program powinien wydrukowa\u0107 <code>Liczba jest dodatnia i parzysta</code></li> <li>Gdzie wykorzystane zostanie zaprzeczenie <code>not</code> lub <code>=!</code> - napisz program, kt\u00f3ry sprawdza, czy wprowadzona przez u\u017cytkownika liczba nie jest r\u00f3wna zero. Je\u015bli nie jest, wydrukuj <code>Liczba jest r\u00f3\u017cna od zera</code> </li> <li>Gdzie wykorzystane b\u0119dzie s\u0142owo <code>in</code> - napisz program, kt\u00f3ry sprawdza, czy wprowadzony przez u\u017cytkownika owoc znajduje si\u0119 na li\u015bcie dost\u0119pnych owoc\u00f3w (np. <code>['jab\u0142ko', 'banan', 'pomara\u0144cza']</code>). Je\u015bli tak, program powinien wydrukowa\u0107 <code>Owoc jest dost\u0119pny</code></li> </ul> </li> <li>Stw\u00f3rz przyk\u0142ad z p\u0119tl\u0105 <code>while</code> - stw\u00f3rz program, kt\u00f3ry b\u0119dzie ci\u0105gle prosi\u0142 u\u017cytkownika o wprowadzenie liczby. Program powinien sumowa\u0107 wprowadzone liczby i ko\u0144czy\u0107 dzia\u0142anie, gdy suma przekroczy <code>100</code>. Po zako\u0144czeniu p\u0119tli, program powinien wydrukowa\u0107 sum\u0119 wprowadzonych liczb.</li> </ol>"},{"location":"zaj01/moduly_przestrzenie/","title":"\ud83c\udf1e Modu\u0142y i przestrzenie nazw","text":""},{"location":"zaj01/moduly_przestrzenie/#wprowadzenie","title":"Wprowadzenie","text":"<p>W Pythonie modu\u0142y i przestrzenie nazw odgrywaj\u0105 kluczow\u0105 rol\u0119 w organizacji kodu. Modu\u0142y pozwalaj\u0105 na podzielenie kodu na mniejsze, \u0142atwiejsze w zarz\u0105dzaniu cz\u0119\u015bci, a przestrzenie nazw pomagaj\u0105 unikn\u0105\u0107 konflikt\u00f3w pomi\u0119dzy nazwami zmiennych, funkcji czy klas.</p>"},{"location":"zaj01/moduly_przestrzenie/#moduy-w-pythonie","title":"Modu\u0142y w Pythonie","text":""},{"location":"zaj01/moduly_przestrzenie/#czym-jest-modu","title":"Czym jest modu\u0142?","text":"<p>Modu\u0142 w Pythonie to plik <code>.py</code>, kt\u00f3ry zawiera zmienne, funkcje i klasy. Dzi\u0119ki nim mo\u017cna podzieli\u0107 kod na niezale\u017cne sekcje, co u\u0142atwia jego ponowne u\u017cycie oraz utrzymanie.</p>"},{"location":"zaj01/moduly_przestrzenie/#tworzenie-i-uzywanie-moduu","title":"Tworzenie i u\u017cywanie modu\u0142u","text":"<p>Za\u0142\u00f3\u017cmy, \u017ce chcemy stworzy\u0107 modu\u0142 do operacji matematycznych. Tworzymy plik <code>matematyka.py</code>: <pre><code>def dodaj(a, b):\n    return a + b\n\ndef odejmij(a, b):\n    return a - b\n</code></pre> Teraz mo\u017cemy zaimportowa\u0107 go w innym skrypcie: <pre><code>import matematyka\n\nwynik = matematyka.dodaj(5, 3)\nprint(f'Wynik dodawania: {wynik}')\n</code></pre></p> <p>Mo\u017cemy te\u017c importowa\u0107 tylko wybrane funkcje: <pre><code>from matematyka import odejmij\n\nwynik = odejmij(10, 4)\nprint(f'Wynik odejmowania: {wynik}')\n</code></pre></p>"},{"location":"zaj01/moduly_przestrzenie/#przestrzenie-nazw","title":"Przestrzenie nazw","text":"<p>Przestrze\u0144 nazw to mechanizm pozwalaj\u0105cy unika\u0107 konflikt\u00f3w mi\u0119dzy zmiennymi i funkcjami. Python organizuje przestrzenie nazw w hierarchiczny spos\u00f3b: 1. Lokalna \u2013 zmienne wewn\u0105trz funkcji, 2. Globalna \u2013 zmienne zadeklarowane w module, 3. Wbudowana \u2013 standardowe funkcje Pythona jak <code>print()</code>.</p>"},{"location":"zaj01/moduly_przestrzenie/#przykad-uzycia-przestrzeni-nazw","title":"Przyk\u0142ad u\u017cycia przestrzeni nazw","text":"<pre><code>x = 10  # Zmienna globalna\n\ndef funkcja():\n    x = 5  # Zmienna lokalna\n    print(f'Warto\u015b\u0107 x wewn\u0105trz funkcji: {x}')\n\nfunkcja()\nprint(f'Warto\u015b\u0107 x na poziomie globalnym: {x}')\n</code></pre>"},{"location":"zaj01/moduly_przestrzenie/#podsumowanie","title":"Podsumowanie","text":"<ol> <li>Modu\u0142y pomagaj\u0105 organizowa\u0107 kod i unika\u0107 powielania funkcji.</li> <li>Przestrzenie nazw zapobiegaj\u0105 konfliktom nazw i organizuj\u0105 zmienne w hierarchii.</li> </ol> <p>Dzi\u0119ki tym mechanizmom Python zapewnia elastyczno\u015b\u0107 w organizacji kodu i jego efektywne zarz\u0105dzanie!</p>"},{"location":"zaj01/moduly_przestrzenie/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Z pakietu <code>os</code> zaimportuj funkcj\u0119 <code>getcwd</code> <pre><code>from os import getcwd\n</code></pre></li> <li>Wywo\u0142aj funkcj\u0119 i przypisz wynik do zmiennej <code>current_path</code></li> <li>Wypisz warto\u015b\u0107 zmiennej <code>current_path</code></li> <li>Stw\u00f3rz plik <code>czas.py</code></li> <li>W pliku <code>czas.py</code> dodaj zmienn\u0105 <code>aktualny_czas</code>:      <pre><code>from datetime import datetime\naktualny_czas = datetime.now()\n</code></pre></li> <li>Zaimportuj modu\u0142 <code>czas</code> w <code>skrypt1.py</code></li> <li>Wypisz warto\u015b\u0107 zmiennej <code>aktualny_czas</code></li> <li>Zaimportuj pakiet <code>time</code> i dodaj op\u00f3\u017anienie:      <pre><code>import time\ntime.sleep(20)\n</code></pre></li> <li>Ponownie wypisz warto\u015b\u0107 zmiennej <code>aktualny_czas</code></li> <li>Prze\u0142aduj modu\u0142 <code>czas</code> (<code>importlib.reload()</code>)</li> <li>Po raz trzeci wypisz warto\u015b\u0107 zmiennej <code>aktualny_czas</code></li> </ol> <p>Zwr\u00f3\u0107 uwag\u0119 na to, kiedy zmieni\u0142a si\u0119 warto\u015b\u0107 zmiennej. Zastan\u00f3w si\u0119, kiedy inicjowana jest zmienna <code>aktualny_czas</code>. </p>"},{"location":"zaj01/niespodziewane/","title":"\ud83c\udf1e Niespodziewane zachowania","text":""},{"location":"zaj01/niespodziewane/#przypisanie-tworzy-referencje-a-nie-kopie","title":"Przypisanie tworzy referencj\u0119, a nie kopi\u0119","text":"<p>W Pythonie przypisanie listy do innej zmiennej nie tworzy nowej kopii, lecz odniesienie do tej samej struktury danych. <pre><code>L = [1,2,3,4]\nM = [1,2,3,L,4]\nprint(f\"Warto\u015b\u0107 zmiennej M przed zmian\u0105 L: {M}\")\nL[1] = \"woooow\"\nprint(f\"Warto\u015b\u0107 zmiennej M po zmianie L: {M}\")\n</code></pre></p> Dlaczego tak si\u0119 dzieje? <ul> <li><code>M</code> zawiera referencj\u0119 do <code>L</code>, a nie jej kopi\u0119.</li> <li>Gdy zmienimy element w <code>L</code>, zmiana jest widoczna r\u00f3wnie\u017c w <code>M</code>, poniewa\u017c odwo\u0142uje si\u0119 do tej samej instancji obiektu.</li> </ul>"},{"location":"zaj01/niespodziewane/#powtorzenie-dodaje-jeden-poziom-zagebienia","title":"Powt\u00f3rzenie dodaje jeden poziom zag\u0142\u0119bienia","text":"<pre><code>L = [4,5,6]\nX = L * 4\nY = [L] * 4\nprint(f\"X: {X}, Y: {Y}\")\nL[1] = \"wow\"\nprint(f\"X: {X}, Y: {Y}\")\n</code></pre> Dlaczego tak si\u0119 dzieje? <ul> <li><code>X = L * 4</code> tworzy now\u0105 list\u0119 powielaj\u0105c zawarto\u015b\u0107 <code>L</code> jako warto\u015bci skalarne</li> <li><code>Y = [L] * 4</code> powiela odniesienie do listy <code>L</code>, nie tworz\u0105c nowych instancji</li> <li>Po zmianie elementu w <code>L</code>, efekt jest widoczny w <code>Y</code>, ale nie w <code>X</code>, poniewa\u017c <code>X</code> zawiera warto\u015bci skopiowane</li> </ul>"},{"location":"zaj01/niespodziewane/#gebsza-analiza-kopiowania-list","title":"G\u0142\u0119bsza analiza kopiowania list","text":"<pre><code>L = [4,5,6]\nY = [list(L)] * 4\nL[1] = \"wow\"\nprint(f\"Y: {Y}\")\nY[0][1] = \"wow\"\nprint(f\"Y: {Y}\")\n</code></pre> Dlaczego tak si\u0119 dzieje? <ul> <li><code>[list(L)] * 4</code> tworzy list\u0119 zawieraj\u0105c\u0105 cztery referencje do tej samej kopii <code>list(L)</code></li> <li>Modyfikacja <code>L</code> nie wp\u0142ynie na <code>Y</code>, poniewa\u017c <code>list(L)</code> tworzy now\u0105 instancj\u0119</li> <li>Jednak zmiana <code>Y[0][1]</code> spowoduje zmian\u0119 we wszystkich elementach <code>Y</code>, poniewa\u017c wszystkie odwo\u0142uj\u0105 si\u0119 do tej samej listy</li> </ul>"},{"location":"zaj01/praca_z_plikami/","title":"Praca z plikami w Pythonie","text":""},{"location":"zaj01/praca_z_plikami/#wprowadzenie","title":"Wprowadzenie","text":"<p>Praca z plikami jest kluczow\u0105 cz\u0119\u015bci\u0105 programowania. Python oferuje wbudowane funkcje do odczytu i zapisu plik\u00f3w, kt\u00f3re pozwalaj\u0105 na manipulowanie danymi zapisanymi na dysku. </p> <p>Podczas pracy z plikami warto stosowa\u0107 mened\u017cery kontekstu (<code>with</code>), kt\u00f3re dbaj\u0105 o poprawne otwarcie i zamkni\u0119cie zasob\u00f3w, zapobiegaj\u0105c wyciekom pami\u0119ci i b\u0142\u0119dom dost\u0119pu.</p>"},{"location":"zaj01/praca_z_plikami/#podstawowe-operacje-na-plikach","title":"Podstawowe operacje na plikach","text":""},{"location":"zaj01/praca_z_plikami/#otwieranie-i-czytanie-pliku-tekstowego","title":"Otwieranie i czytanie pliku tekstowego","text":"<pre><code>with open('example.txt', 'r', encoding='utf-8') as file:\n    content = file.read()\n    print(content)  # Wy\u015bwietla zawarto\u015b\u0107 pliku\n</code></pre> <ul> <li><code>'r'</code> \u2013 tryb odczytu (<code>read</code>),</li> <li><code>encoding='utf-8'</code> \u2013 obs\u0142uga znak\u00f3w specjalnych, np. polskich liter.</li> </ul>"},{"location":"zaj01/praca_z_plikami/#odczyt-linii-po-linii","title":"Odczyt linii po linii","text":"<p>Aby nie wczytywa\u0107 ca\u0142ego pliku do pami\u0119ci, mo\u017cna czyta\u0107 go linia po linii: <pre><code>with open('example.txt', 'r', encoding='utf-8') as file:\n    for line in file:\n        print(line.strip())  # Usuwanie znak\u00f3w nowej linii\n</code></pre></p>"},{"location":"zaj01/praca_z_plikami/#zapisywanie-do-pliku","title":"Zapisywanie do pliku","text":"<pre><code>with open('output.txt', 'w', encoding='utf-8') as file:\n    file.write(\"To jest przyk\u0142adowy tekst.\\n\")\n    file.write(\"Druga linia tekstu.\\n\")\n</code></pre> <ul> <li><code>'w'</code> \u2013 tryb zapisu (<code>write</code>), nadpisuje plik,</li> <li><code>'a'</code> \u2013 tryb dopisania (<code>append</code>), dodaje dane do pliku zamiast go nadpisywa\u0107.</li> </ul>"},{"location":"zaj01/praca_z_plikami/#wczytywanie-tylko-czesci-pliku","title":"Wczytywanie tylko cz\u0119\u015bci pliku","text":"<p>Je\u015bli plik jest du\u017cy, warto odczytywa\u0107 go fragmentami: <pre><code>with open('example.txt', 'r', encoding='utf-8') as file:\n    chunk = file.read(1024)  # Czyta 1024 bajty (1 KB) na raz\n    while chunk:\n        print(chunk)\n        chunk = file.read(1024)\n</code></pre></p>"},{"location":"zaj01/praca_z_plikami/#praca-z-plikami-binarnymi","title":"Praca z plikami binarnymi","text":"<p>Pliki binarne (np. obrazy, pliki audio) odczytuje si\u0119 w trybie <code>'rb'</code>. <pre><code>with open('image.png', 'rb') as file:\n    data = file.read()\n    print(data[:20])  # Wy\u015bwietla pierwsze 20 bajt\u00f3w\n</code></pre> Zapisywanie plik\u00f3w binarnych: <pre><code>with open('copy.png', 'wb') as new_file:\n    new_file.write(data)\n</code></pre></p>"},{"location":"zaj01/praca_z_plikami/#automatyczne-zamykanie-plikow","title":"Automatyczne zamykanie plik\u00f3w","text":"<p>Mened\u017cery kontekstu (<code>with</code>) automatycznie zamykaj\u0105 plik, ale mo\u017cna to zrobi\u0107 r\u0119cznie: <pre><code>file = open('example.txt', 'r', encoding='utf-8')\ncontent = file.read()\nfile.close()\n</code></pre> Jednak lepiej zawsze u\u017cywa\u0107 <code>with open()</code>, poniewa\u017c w przypadku b\u0142\u0119d\u00f3w plik mo\u017ce pozosta\u0107 otwarty.</p>"},{"location":"zaj01/praca_z_plikami/#podsumowanie","title":"Podsumowanie","text":"<ol> <li>Mened\u017cery kontekstu (<code>with open()</code>) u\u0142atwiaj\u0105 zarz\u0105dzanie plikami.</li> <li>Kodowanie <code>utf-8</code> jest domy\u015blnym standardem, ale istniej\u0105 r\u00f3wnie\u017c inne.</li> <li>Czytanie du\u017cych plik\u00f3w mo\u017cna optymalizowa\u0107, odczytuj\u0105c je fragmentami (<code>read(1024)</code>).</li> <li>Pliki binarne wymagaj\u0105 tryb\u00f3w <code>'rb'</code> i <code>'wb'</code>.</li> </ol>"},{"location":"zaj01/typy_wbudowane/","title":"\ud83c\udf1e Podstawowe typy wbudowane","text":""},{"location":"zaj01/typy_wbudowane/#wprowadzenie","title":"Wprowadzenie","text":"<p>W Pythonie istnieje kilka podstawowych typ\u00f3w wbudowanych, kt\u00f3re pozwalaj\u0105 na przechowywanie i manipulowanie r\u00f3\u017cnymi rodzajami danych. Do najwa\u017cniejszych nale\u017c\u0105:</p> <ul> <li>Liczby (int, float, complex) \u2013 typy liczbowe,</li> <li>\u0141a\u0144cuchy znak\u00f3w (str) \u2013 sekwencje znak\u00f3w,</li> <li>Listy (list) \u2013 uporz\u0105dkowane kolekcje element\u00f3w,</li> <li>Krotki (tuple) \u2013 niemutowalne kolekcje element\u00f3w,</li> <li>S\u0142owniki (dict) \u2013 struktury danych przechowuj\u0105ce pary klucz-warto\u015b\u0107,</li> <li>Zbiory (set) \u2013 nieuporz\u0105dkowane kolekcje unikalnych element\u00f3w.</li> </ul>"},{"location":"zaj01/typy_wbudowane/#liczby","title":"Liczby","text":""},{"location":"zaj01/typy_wbudowane/#typy-liczbowe-w-pythonie","title":"Typy liczbowe w Pythonie","text":"<p>Python obs\u0142uguje kilka typ\u00f3w liczbowych: <pre><code># Liczba ca\u0142kowita\nx = 10  # int\n\n# Liczba zmiennoprzecinkowa\ny = 3.14  # float\n\n# Liczba zespolona\nz = 1 + 2j  # complex\n</code></pre></p> Dok\u0142adno\u015b\u0107 liczb zmiennoprzecinkowych <p>Dok\u0142adno\u015b\u0107 liczb zmiennoprzecinkowych</p> <p>Warto pami\u0119ta\u0107, \u017ce liczby zmiennoprzecinkowe (<code>float</code>) s\u0105 reprezentowane w standardzie IEEE 754, co mo\u017ce prowadzi\u0107 do b\u0142\u0119d\u00f3w zaokr\u0105gle\u0144: <pre><code>print(0.1 + 0.2)  # Wynik mo\u017ce by\u0107 0.30000000000000004 zamiast 0.3\n</code></pre> Aby unikn\u0105\u0107 problem\u00f3w precyzji, mo\u017cna u\u017cywa\u0107 modu\u0142u <code>decimal</code>: <pre><code>from decimal import Decimal\n\nx = Decimal('0.1')\ny = Decimal('0.2')\nprint(x + y)  # Wynik: 0.3 (dok\u0142adnie)\n</code></pre></p> <p>32-bit vs. 64-bit</p> <p>Python samodzielnie zarz\u0105dza precyzj\u0105 liczb ca\u0142kowitych, ale liczby zmiennoprzecinkowe (<code>float</code>) zale\u017c\u0105 od architektury systemu:</p> <ul> <li>Systemy 32-bitowe przechowuj\u0105 <code>float</code> jako pojedyncz\u0105 precyzj\u0119 (32 bity), co mo\u017ce prowadzi\u0107 do wi\u0119kszych b\u0142\u0119d\u00f3w zaokr\u0105gle\u0144.</li> <li>Systemy 64-bitowe u\u017cywaj\u0105 podw\u00f3jnej precyzji (64 bity), co zapewnia wi\u0119ksz\u0105 dok\u0142adno\u015b\u0107, ale nadal podlega ograniczeniom standardu IEEE 754.</li> </ul> <p>Je\u015bli kluczowa jest precyzja oblicze\u0144, warto rozwa\u017cy\u0107 u\u017cycie <code>decimal.Decimal</code> lub <code>fractions.Fraction</code>.</p>"},{"location":"zaj01/typy_wbudowane/#operacje-matematyczne","title":"Operacje matematyczne","text":"<p>Python obs\u0142uguje podstawowe operacje matematyczne: <pre><code>a = 10\nb = 3.5\n\nsuma = a + b\nroznica = a - b\niloczyn = a * b\niloraz = a / b\npotega = a ** 2\nmodulo = a % 3\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#ancuchy-znakow","title":"\u0141a\u0144cuchy znak\u00f3w","text":"<p>\u0141a\u0144cuchy znak\u00f3w w Pythonie s\u0105 niezmienne i mo\u017cna si\u0119 do nich odwo\u0142ywa\u0107 jak do sekwencji: <pre><code>tekst = \"Witaj, \u015bwiecie!\"\nprint(tekst[0])  # Pierwszy znak\nprint(tekst[-1])  # Ostatni znak\nprint(tekst[0:5])  # Fragment \u0142a\u0144cucha\n</code></pre></p> <p>Mo\u017cemy r\u00f3wnie\u017c manipulowa\u0107 \u0142a\u0144cuchami: <pre><code>print(tekst.upper())  # Wielkie litery\nprint(tekst.lower())  # Ma\u0142e litery\nprint(tekst.replace(\"Witaj\", \"Hello\"))  # Zamiana fragmentu\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#listy","title":"Listy","text":"<p>Listy s\u0105 dynamicznymi kolekcjami element\u00f3w r\u00f3\u017cnych typ\u00f3w: <pre><code>lista = [1, 2, 3, \"Python\", 3.14]\nprint(lista[2])  # Dost\u0119p do elementu\n\nlista.append(\"Nowy element\")  # Dodanie elementu\nlista.remove(3)  # Usuni\u0119cie elementu\nprint(lista)\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#operacje-na-listach","title":"Operacje na listach","text":""},{"location":"zaj01/typy_wbudowane/#wycinki-slicing","title":"Wycinki (slicing)","text":"<p>Listy obs\u0142uguj\u0105 operacje wycinania (slicing): <pre><code>lista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(lista[2:5])  # Elementy od indeksu 2 do 4\nprint(lista[:4])   # Pierwsze 4 elementy\nprint(lista[5:])   # Wszystkie elementy od indeksu 5\nprint(lista[-3:])  # Ostatnie 3 elementy\nprint(lista[::2])  # Co drugi element\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#odwracanie-listy","title":"Odwracanie listy","text":"<pre><code>print(lista[::-1])  # Odwr\u00f3cenie kolejno\u015bci element\u00f3w\n</code></pre>"},{"location":"zaj01/typy_wbudowane/#sprawdzanie-obecnosci-elementu","title":"Sprawdzanie obecno\u015bci elementu","text":"<pre><code>if \"Python\" in lista:\n    print(\"Element istnieje w li\u015bcie!\")\n</code></pre> <p>Mo\u017cna tak\u017ce u\u017cywa\u0107 list sk\u0142adanych: <pre><code>liczby = [x for x in range(10) if x % 2 == 0]\nprint(liczby)  # Lista parzystych liczb\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#sowniki","title":"S\u0142owniki","text":"<p>S\u0142owniki przechowuj\u0105 dane w postaci par klucz-warto\u015b\u0107: <pre><code>osoba = {\n    \"imie\": \"Jan\",\n    \"nazwisko\": \"Kowalski\",\n    \"wiek\": 30\n}\nprint(osoba[\"imie\"])  # Dost\u0119p do warto\u015bci\n\nosoba[\"miasto\"] = \"Warszawa\"  # Dodanie nowej pary\nprint(osoba)\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#krotki","title":"Krotki","text":"<p>Krotki dzia\u0142aj\u0105 podobnie do list, ale s\u0105 niemutowalne: <pre><code>krotka = (1, 2, \"Python\", 3.14)\nprint(krotka[1])\n</code></pre> Pr\u00f3ba modyfikacji krotki spowoduje b\u0142\u0105d: <pre><code># krotka[1] = 5  # B\u0142\u0105d: nie mo\u017cna modyfikowa\u0107 element\u00f3w krotki\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#zbiory","title":"Zbiory","text":"<p>Zbiory przechowuj\u0105 unikalne warto\u015bci i pozwalaj\u0105 na operacje matematyczne: <pre><code>zbior1 = {1, 2, 3, 4}\nzbior2 = {3, 4, 5, 6}\n\nprint(zbior1 &amp; zbior2)  # Cz\u0119\u015b\u0107 wsp\u00f3lna\nprint(zbior1 | zbior2)  # Suma zbior\u00f3w\n</code></pre></p>"},{"location":"zaj01/typy_wbudowane/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Stw\u00f3rz nowy plik o nazwie <code>skrypt2.py</code>, wszystkie kolejne instrukcje wprowadzaj po kolei w tym pliku</li> </ol> <p>Pami\u0119taj, \u017ce dobr\u0105 praktyk\u0105 jest importowanie modu\u0142\u00f3w i pakiet\u00f3w na samym pocz\u0105tku pliku</p> <p>Na r\u00f3\u017cnych etapach tych zada\u0144 wykorzystaj funkcj\u0119 <code>type()</code>, kt\u00f3ra pozwala zauwa\u017cy\u0107, jak dzia\u0142a dynamiczne typowanie w Pythonie</p> <p>Dzia\u0142ania matematyczne</p> <ol> <li>Stw\u00f3rz zmienn\u0105 <code>wartosc</code> i przypisz jej liczb\u0119 100</li> <li>Do zmiennej <code>dodawanie</code> przypisz warto\u015b\u0107 dodania do zmiennej <code>wartosc</code> liczby <code>123.15</code></li> <li> <p>Stw\u00f3rz zmienn\u0105 <code>potega</code> i przypisz do niej zmienn\u0105 <code>dodawanie</code> podniesion\u0105 do pot\u0119gi <code>12345</code></p> Pojawia Ci si\u0119 b\u0142\u0105d? <p>Jest to spodziewane, zamie\u0144 pot\u0119g\u0119 na <code>12</code>.</p> </li> <li> <p>Do zmiennej <code>tekst</code> przypisz rzutowanie warto\u015bci zmiennej <code>potega</code> na typ <code>string</code> (funkcja <code>str()</code>) </p> </li> <li>Do zmiennej <code>wartosc_pi</code> przypisz warto\u015b\u0107 liczby pi</li> <li>Do zmiennej <code>losowa</code> przypisz losow\u0105 warto\u015b\u0107 z listy [1,2,3,4,5]</li> </ol> <p>\u0141a\u0144cuchy znak\u00f3w</p> <ol> <li>Nadpisz zmienn\u0105 <code>tekst</code> nast\u0119puj\u0105cym wyra\u017ceniem: <code>tekst = f\"Wartosc: {tekst}\"</code></li> <li>Wy\u015bwietl d\u0142ugo\u015b\u0107 tekstu w zmiennej <code>tekst</code> i p\u00f3\u017aniej wykorzystuj\u0105c wycinki wy\u015bwietl cz\u0119\u015b\u0107 zmiennej <code>tekst</code> o warto\u015bci \u201eart\u201d</li> <li>Wypisz warto\u015b\u0107 funkcji <code>dir(tekst)</code></li> <li>Zmie\u0144 ca\u0142y \u0142a\u0144cuch znak\u00f3w w zmiennej <code>tekst</code> na wielkie litery, wypisz </li> <li> <p>Spr\u00f3buj zamieni\u0107 znak na pozycji 2 w \u0142a\u0144cuchu w zmiennej <code>tekst</code> na znak p</p> Pojawia Ci si\u0119 b\u0142\u0105d? <p>Jest to spodziewane, zapoznaj si\u0119 z b\u0142\u0119dem i usu\u0144 lub zakomentuj\u0105 t\u0105 lini\u0119 kodu.</p> </li> </ol> <p>Listy</p> <p>Dzia\u0142ania na listach: </p> <ol> <li>Stw\u00f3rz zmienn\u0105 o nazwie <code>lista</code>, przypisz do niej rzutowanie na list\u0119 (funkcja <code>list()</code>) zmiennej <code>tekst</code>. </li> <li>Wykorzystuj\u0105c wycinki zr\u00f3b tak, \u017ceby lista zawiera\u0142a jedynie litery s\u0142owa <code>WARTOSC</code> i p\u00f3\u017aniej dwukropek.</li> <li>Do listy dodaj kolejny wyraz, niech b\u0119dzie to kolejna lista <code>[1,2,3,4,5]</code>. </li> <li>Z listy usu\u0144 wyraz, kt\u00f3ry jest dwukropkiem. </li> <li>Wypisz zmienn\u0105 lista. </li> </ol> <p>Listy sk\u0142adane (list comprehension): </p> <ol> <li>Stw\u00f3rz zmienn\u0105 jak tutaj: <code>lista2 = [1,2,3,\"banan\",100]</code>. </li> <li>Jako zmienna <code>lista3</code>, wykorzystaj sk\u0142adni\u0119 listy sk\u0142adanej, przeiteruj po ka\u017cdym wyrazie z listy, do nowej listy zapisz warto\u015b\u0107 podniesion\u0105 do pot\u0119gi 2, je\u015bli warto\u015b\u0107 jest r\u00f3wna \"banan\" to j\u0105 pomi\u0144. </li> <li>Stw\u00f3rz <code>lista4</code>, wykorzystaj funkcj\u0119 <code>range()</code>, ma ona zawiera\u0107 co drug\u0105 liczb\u0119 od 2 do 16.</li> <li>Wypisz zmienne <code>lista2</code>, <code>lista3</code> i <code>lista4</code>.</li> </ol> <p>S\u0142owniki</p> <ol> <li>Stw\u00f3rz pusty s\u0142ownik o nazwie <code>ja</code></li> <li>Niech b\u0119dzie to reprezentacja Twojej osoby, dodaj do niego klucze <code>imie</code>, <code>nazwisko</code>, <code>wiek</code>, <code>moje_hobby</code> (reprezentowane przez list\u0119 z 2 zagnie\u017cd\u017conymi s\u0142ownikami o 2 kluczach: <code>nazwa</code> i <code>dlaczego</code>)</li> <li>Wypisz warto\u015b\u0107 klucza <code>moje_hobby</code></li> <li>Wypisz jedynie nazw\u0119 pierwszego hobby </li> <li>Wypisz wszystkie klucze naszego s\u0142ownika</li> <li>Sprawd\u017a czy nasz s\u0142ownik posiada klucz <code>adres</code>, wypisz zmienn\u0105 typu <code>boolean</code></li> </ol> <p>Krotki</p> <ol> <li>Do zmiennej <code>krotka1</code> przypisz warto\u015b\u0107 <code>(1,2,\"3\",4,2,5)</code></li> <li>Wypisz d\u0142ugo\u015b\u0107 zmiennej i pierwszy wyraz</li> <li>Sprawd\u017a, ile razy wyst\u0119puje warto\u015b\u0107 2 i wypisz</li> <li>Spr\u00f3buj zmieni\u0107 pierwszy wyraz na warto\u015b\u0107 2</li> </ol> <p>Zbiory</p> <ol> <li>Stw\u00f3rz dwa zbiory o nazwach <code>X</code> i <code>Y</code>, nadaj im warto\u015bci odpowiednio: <code>set(\"kalarepa\")</code> oraz <code>set(\"lepy\")</code></li> <li>Wy\u015bwietl cz\u0119\u015b\u0107 wsp\u00f3ln\u0105 obu zbior\u00f3w - mo\u017cna na nich wykonywa\u0107 podobne operacje jak na zbiorach matematycznych</li> </ol>"},{"location":"zaj01/zadania_sprawdzajace/","title":"\ud83c\udf1e\ud83d\udcdd Zadanie sprawdzaj\u0105ce","text":"<p>Wczytaj jako s\u0142ownik plik z rozszerzeniem JSON (przydatny mo\u017ce okaza\u0107 si\u0119 pakiet <code>json</code>). Zapisz do zmiennej po\u0142\u0105czone wszystkie teksty z pliku. Zmodyfikuj nast\u0119puj\u0105co ten tekst: </p> <ul> <li>Zamie\u0144 wszystkie du\u017ce litery na ma\u0142e, </li> <li>Podziel go na wyrazy - b\u0119dzie to najprawdopodobniej lista, </li> <li>Usu\u0144 znaki interpunkcyjne \u2013 w tek\u015bcie wyst\u0119puj\u0105 jedynie kropki i przecinki, </li> <li>Zmodyfikuj tak ka\u017cdy wyraz, \u017ceby w ka\u017cdym ostatni znak by\u0142 w formacie du\u017cej litery (np. wyraz <code>KozA</code>), </li> <li>Z listy usu\u0144 wyrazy, kt\u00f3re nie posiadaj\u0105 w sobie znaku a lub A - mo\u017cna wykorzysta\u0107 sk\u0142adni\u0119 list sk\u0142adanych,</li> <li>Stw\u00f3rz zmienn\u0105, kt\u00f3re b\u0119dzie przechowywa\u0107 wszystkie unikatowe wyrazy - mo\u017cna wykorzysta\u0107 zbiory, </li> <li>Stw\u00f3rz zmienn\u0105, kt\u00f3ra b\u0119dzie przetrzymywa\u0107 ilo\u015b\u0107 wyst\u0105pie\u0144 dla ka\u017cdego ze s\u0142\u00f3w wyst\u0119puj\u0105cych w tek\u015bcie - mo\u017cna wykorzysta\u0107 s\u0142owniki.</li> </ul> <p>Zapisz stworzone zmienne do pliku JSON, warto\u015bci kluczy wybierz samodzielnie.</p>"},{"location":"zaj02/funkcje/","title":"\u2744\ufe0f Wst\u0119p - funkcje","text":""},{"location":"zaj02/funkcje/#wstep","title":"Wst\u0119p","text":"<p>Funkcje pozwalaj\u0105 na organizowanie i strukturyzowanie kodu w logiczne bloki, kt\u00f3re mo\u017cna wielokrotnie wywo\u0142ywa\u0107. Dzi\u0119ki funkcjom mo\u017cemy upro\u015bci\u0107 programy, zmniejszy\u0107 ilo\u015b\u0107 powtarzaj\u0105cego si\u0119 kodu, a tak\u017ce sprawi\u0107, \u017ce nasze rozwi\u0105zania stan\u0105 si\u0119 bardziej modularne i \u0142atwiejsze do utrzymania.</p> <p>Zalety u\u017cywania funkcji:</p> <ul> <li> <p>Modularno\u015b\u0107 - dzielisz du\u017cy problem na mniejsze cz\u0119\u015bci, kt\u00f3re s\u0105 \u0142atwiejsze do zarz\u0105dzania.</p> </li> <li> <p>Ponowne wykorzystanie - funkcj\u0119 mo\u017cna wywo\u0142ywa\u0107 wielokrotnie w r\u00f3\u017cnych miejscach programu.</p> </li> <li> <p>\u0141atwiejsze utrzymanie - zmiana logiki w jednym miejscu (w funkcji) automatycznie wprowadza zmiany w ca\u0142ym programie.</p> </li> <li> <p>Czytelno\u015b\u0107 - funkcje pomagaj\u0105 tworzy\u0107 bardziej zrozumia\u0142y i uporz\u0105dkowany kod.</p> </li> </ul> <pre><code>import random\ndef generuj_losowa(seed=None):\n    # Ustawienie ziarna (seed) generatora liczb losowych\n    if seed is not None:\n        random.seed(seed)\n    # Generowanie losowej liczby z zakresu od 0 do 100\n    return random.randint(0, 100)\n\nliczba = generuj_losowa(seed=42)\nprint(f\"Wygenerowana liczba: {liczba}\")\n</code></pre> <p>Trzy kluczowe elementy ka\u017cdej funkcji:</p> <ol> <li> <p>S\u0142owo kluczowe s\u0142u\u017cace definiowaniu funkcji - <code>def</code></p> </li> <li> <p>Argumenty: definiowanie i podawane wewn\u0105trz <code>()</code></p> </li> <li> <p>Zwracane warto\u015bci - s\u0142owo kluczowe <code>return</code></p> </li> </ol>"},{"location":"zaj02/funkcje/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Napisz funkcj\u0119 <code>zmien_wartosc(arg)</code>, kt\u00f3ra przyjmuje jeden argument i pr\u00f3buje zmodyfikowa\u0107 ten argument w r\u00f3\u017cny spos\u00f3b w zale\u017cno\u015bci od tego, czy jest on niemutowalny (w tym przypadku integerem) czy mutowalny (w tym przypadku list\u0105).</p> <ul> <li> <p>Je\u015bli jest list\u0105, wykonaj <code>arg[0] = 'kalafior'</code>.</p> </li> <li> <p>Je\u015bli jest integerem, wykonaj <code>arg = 65482652</code>.</p> </li> </ul> </li> </ol> <p>Wypisz przyk\u0142ady dla obu przypadk\u00f3w, wypisz warto\u015bci przed i po wykonaniu funkcji. Jak si\u0119 zachowuj\u0105 te obiekty?</p> <p>Tip</p> <p>Warto skorzysta\u0107 z funkcji <code>isinstance()</code>.</p> Teoria: mutowalne i niemutowalne obiekty w funkcjach <p>Kiedy zmienne s\u0105 przekazywane do funkcji jako argumenty, Python nie tworzy ich kopii, lecz przekazuje referencj\u0119 do oryginalnego obiektu. W zwi\u0105zku z tym spos\u00f3b, w jaki te obiekty zachowuj\u0105 si\u0119 wewn\u0105trz funkcji, zale\u017cy od ich typu \u2013 mutowalne lub niemutowalne.</p> <p>Obiekty mutowalne (np. listy, s\u0142owniki):</p> <p>Zmienne tego typu mog\u0105 by\u0107 modyfikowane w miejscu. Je\u015bli zostan\u0105 przekazane jako argumenty do funkcji i ich zawarto\u015b\u0107 zostanie zmieniona, zmiana ta wp\u0142ynie na oryginalny obiekt, kt\u00f3ry istnieje poza funkcj\u0105.</p> <p>Obiekty niemutowalne (np. liczby, napisy, krotki):</p> <p>Zmienne niemutowalne nie mog\u0105 by\u0107 modyfikowane w miejscu. Ka\u017cda pr\u00f3ba modyfikacji powoduje utworzenie nowego obiektu. Z tego powodu, zmiany wprowadzone wewn\u0105trz funkcji nie wp\u0142ywaj\u0105 na oryginalny obiekt poza funkcj\u0105.</p>"},{"location":"zaj02/funkcje/#dopasowywanie-argumentow","title":"Dopasowywanie argument\u00f3w","text":"<p>Funkcje mog\u0105 przyjmowa\u0107 argumenty na r\u00f3\u017cne sposoby, co umo\u017cliwia elastyczne przekazywanie danych. Kluczowe elementy to: argumenty pozycyjne, argumenty nazwane, warto\u015bci domy\u015blne, oraz specjalne operatory <code>*args</code> i <code>**kwargs</code>, kt\u00f3re pozwalaj\u0105 na przekazywanie zmiennej liczby argument\u00f3w.</p> <pre><code># dodanie warto\u015bci domy\u015blnych\ndef dodaj(a = 0, b = 0):\n    return a + b\n\n# argumenty pozycyjne przekazywane s\u0105 w podanej kolejno\u015bci\nprint(dodaj(3, 5))\n\n# argumenty nazwane mo\u017cna miesza\u0107\nprint(b=5, a=3)\n</code></pre> <p><code>*args</code> - zmienna liczba argument\u00f3w pozycyjnych</p> <p>Wszystkie dodatkowe argumenty s\u0105 zbierane w krotk\u0119, dzi\u0119ki czemu mo\u017cemy obs\u0142u\u017cy\u0107 wi\u0119cej argument\u00f3w, ni\u017c zdefiniowano w sygnaturze funkcji.</p> <pre><code>def suma(*liczby):\n    return sum(liczby)\n\nprint(suma(1, 2, 3))\nprint(suma(10, 20))\n</code></pre> <p><code>**kwargs</code> \u2013 zmienna liczba argument\u00f3w nazwanych</p> <p>Argumenty s\u0105 zbierane w s\u0142ownik, co umo\u017cliwia przekazanie wi\u0119kszej liczby argument\u00f3w nazwanych, ni\u017c przewidziano w sygnaturze funkcji.</p> <pre><code>def przedstaw_sie(**dane):\n    for klucz, wartosc in dane.items():\n        print(f\"{klucz}: {wartosc}\")\n\nprzedstaw_sie(imie=\"Jan\", wiek=30, miasto=\"Krak\u00f3w\")\n</code></pre> Mieszane u\u017cycie argument\u00f3w nie zawsze jest mo\u017cliwe <p>Wa\u017cne jest, aby przestrzega\u0107 kolejno\u015bci: najpierw argumenty pozycyjne, potem domy\u015blne, nast\u0119pnie <code>*args</code>, a na ko\u0144cu <code>**kwargs</code>.</p> <pre><code>def funkcja_mieszana(a, b=10, *args, **kwargs):\n    print(f\"a: {a}, b: {b}\")\n    print(f\"Argumenty dodatkowe (args): {args}\")\n    print(f\"Argumenty nazwane (kwargs): {kwargs}\")\n\nfunkcja_mieszana(1, 2, 3, 4, imie=\"Ania\", wiek=25)\n</code></pre> <p>Oraz kilka niepoprawnych wywo\u0142a\u0144:</p> <pre><code>funkcja_mieszana()\nfunkcja_mieszana(1, 2, 3, 4, 5, a=6)\nfunkcja_mieszana(1, 2, 3, imie=\"Jan\")\nfunkcja_mieszana(a=1, 20)\n</code></pre> <p>Sama definicja r\u00f3wnie\u017c mo\u017ce by\u0107 niepoprawna:</p> <pre><code>def funkcja_mieszana(a=10, b):\n    print(f\"a: {a}, b: {b}\")\n</code></pre>"},{"location":"zaj02/funkcje/#zadania_1","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Napisz funkcj\u0119 <code>zamowienie_produktu</code>, kt\u00f3ra przyjmuje jeden obowi\u0105zkowy argument pozycyjny <code>nazwa_produktu</code> i dwa obowi\u0105zkowe argumenty nazwane: <code>cena</code> i <code>ilosc</code>. Funkcja powinna zwraca\u0107 text podsumowuj\u0105cy zam\u00f3wienie, zawieraj\u0105ce nazw\u0119 produktu, \u0142\u0105czn\u0105 cen\u0119 (cena * ilo\u015b\u0107) oraz ilo\u015b\u0107 zam\u00f3wionego produktu.</p> <ul> <li> <p>Stw\u00f3rz pust\u0105 list\u0119, do kt\u00f3rej wstawisz warto\u015bci zwracane przez funkcj\u0119 dla 3 r\u00f3\u017cnych produkt\u00f3w.</p> </li> <li> <p>Przeiteruj po wype\u0142nionej li\u015bcie, wy\u015bwietl teksty.</p> </li> <li> <p>Zmodyfikuj funkcj\u0119 tak, \u017ceby opr\u00f3cz tekstu podsumowuj\u0105cego zwraca\u0142a tak\u017ce warto\u015b\u0107 zam\u00f3wienia.</p> </li> <li> <p>Na koniec wy\u015bwietl sumaryczn\u0105 warto\u015b\u0107 zam\u00f3wie\u0144 (sum\u0119 z ka\u017cdego zam\u00f3wionego produktu).</p> </li> <li> <p>Dodaj warto\u015b\u0107 domy\u015bln\u0105 dla argumentu <code>ilosc</code> r\u00f3wn\u0105 1.</p> </li> </ul> </li> </ol> <p>Wa\u017cna informacja</p> <p>Wykorzystaj poni\u017cszy pocz\u0105tek definicji i go nie modyfikuj. Wymusi to podawanie argument\u00f3w po gwiazdce jedynie w formie nazwanej.</p> <pre><code>def zamowienie_produktu(nazwa_produktu, *, cena, ilosc):\n</code></pre> <ol> <li>Napisz funkcj\u0119 <code>stworz_raport</code>, kt\u00f3ra przyjmuje dowoln\u0105 liczb\u0119 argument\u00f3w pozycyjnych (<code>*args</code>) i nazwanych (<code>**kwargs</code>). Argumenty pozycyjne powinny reprezentowa\u0107 numery ID produkt\u00f3w, a argumenty nazwane - informacje o tych produktach (np. nazwa, cena). Funkcja powinna tworzy\u0107 i wy\u015bwietla\u0107 raport, w kt\u00f3rym dla ka\u017cdego ID produktu podane s\u0105 szczeg\u00f3\u0142owe informacje na jego temat.</li> </ol> <p>Wywo\u0142anie funkcji powinno wygl\u0105da\u0107 nast\u0119puj\u0105co:</p> <pre><code>stworz_raport(101, 102, nazwa_101=\"Kubek termiczny\", cena_101=\"45.99 z\u0142\", nazwa_102=\"D\u0142ugopis\", cena_102=\"4.99 z\u0142\")\n</code></pre>"},{"location":"zaj02/funkcje/#funkcje-praktyczne-porady","title":"Funkcje - praktyczne porady","text":"<ol> <li>Funkcje powinny by\u0107 niezale\u017cne od otoczenia - argumenty jako input, return jako output.</li> <li>Unikamy zmiennych globalnych.</li> <li>Nie modyfikujemy argument\u00f3w mutowalnych.</li> <li>Funkcja ma by\u0107 ma\u0142a i mie\u0107 jeden cel.</li> <li>Nie zmieniamy warto\u015bci zmiennych z innych modu\u0142\u00f3w.</li> </ol>"},{"location":"zaj02/funkcje/#atrybuty","title":"Atrybuty","text":"<p>Ka\u017cdy obiekt w Pythonie mo\u017ce mie\u0107 swoje atrybuty. S\u0142u\u017c\u0105 one przechowywaniu dodatkowych informacji na ich temat lub umo\u017cliwiaj\u0105 dost\u0119p do ich stan\u00f3w wewn\u0119trznych.</p> <p>Do atrybut\u00f3w odwo\u0142ujemy si\u0119 za pomoc\u0105 notacji kropkowej, np. <code>obiekt.atrybut</code>. Funkcje, tak samo jak inne obiekty, mog\u0105 mie\u0107 swoje atrybuty.</p> <pre><code>def sample_function():\n    return \"Hello, world!\"\n\nsample_function.description = \"To jest przyk\u0142adowa funkcja.\"  # Dodanie niestandardowego atrybutu\nprint(sample_function.description)\n</code></pre>"},{"location":"zaj02/funkcje/#adnotacje","title":"Adnotacje","text":"<p>Jest to spos\u00f3b na dodawanie informacji o typach danych u\u017cywanych w kodzie. Cho\u0107 Python jest j\u0119zykiem dynamicznie typowanym i nie wymaga jawnego okre\u015blania typ\u00f3w, adnotacje daj\u0105 programi\u015bcie mo\u017cliwo\u015b\u0107 wskazania, jakie typy danych powinny by\u0107 u\u017cywane, co poprawia czytelno\u015b\u0107 i u\u0142atwia prac\u0119 w zespo\u0142ach.</p> Idea adnotacji <p>Adnotacje stanowi\u0105 co\u015b w rodzaju \"podpowiedzi\" dla innych programist\u00f3w oraz narz\u0119dzi analizuj\u0105cych kod (np. linter\u00f3w, IDE), kt\u00f3re mog\u0105 je wykorzysta\u0107 do u\u0142atwienia debugowania, uzupe\u0142niania kodu, czy znajdowania potencjalnych b\u0142\u0119d\u00f3w.</p> <p>W poni\u017cszym przyk\u0142adzie argument <code>name</code> ma by\u0107 typu <code>str</code>, tak samo zwracana przez funkcj\u0119 warto\u015b\u0107.</p> <pre><code>def greet(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n</code></pre> <p>Zmienne tak\u017ce mog\u0105 posiada\u0107 swoje adnotacje.</p> <pre><code>age: int = 25\nname: str = \"Alice\"\n</code></pre> <p>Zaawansowane typy importuje si\u0119 z modu\u0142u <code>typing</code>.</p> <pre><code>from typing import List, Optional, Dict\n\ndef get_user_info(user_id: int) -&gt; Optional[Dict[str, str]]:\n    if user_id == 1:\n        return {\"name\": \"Hubert\", \"email\": \"hubert@example.com\"}\n    return None  # Funkcja mo\u017ce zwr\u00f3ci\u0107 s\u0142ownik lub None\n</code></pre>"},{"location":"zaj02/generatory/","title":"\u2744\ufe0f Generatory","text":""},{"location":"zaj02/generatory/#generatory","title":"Generatory","text":"<p>Generatory to specjalne obiekty, kt\u00f3re generuj\u0105 wyniki na \u017c\u0105danie \u2013 jeden po drugim \u2013 zamiast tworzy\u0107 i przechowywa\u0107 ca\u0142\u0105 seri\u0119 wynik\u00f3w od razu. Dzi\u0119ki temu generatory s\u0105 wydajniejsze w pracy z du\u017cymi zestawami danych, poniewa\u017c zu\u017cywaj\u0105 mniej pami\u0119ci.</p> <p>Generatory dzia\u0142aj\u0105 na zasadzie lazy evaluation, co oznacza, \u017ce nie obliczaj\u0105 wszystkich wynik\u00f3w od razu, lecz tylko wtedy, gdy s\u0105 potrzebne.</p> Czym generatory r\u00f3\u017cni\u0105 si\u0119 od iterator\u00f3w? <p>R\u00f3\u017cni\u0105 si\u0119 w sposobie ich tworzenia:</p> <ul> <li> <p>Iteratory mog\u0105 by\u0107 tworzone z dowolnej kolekcji iterowalnej (np. listy, krotki, s\u0142ownika) przez wywo\u0142anie <code>iter()</code>, albo przez definiowanie klasy z metod\u0105 <code>__iter__()</code> i <code>__next__()</code>.</p> </li> <li> <p>Generatory s\u0105 tworzone przy u\u017cyciu funkcji z yield lub jako wyra\u017cenia generator\u00f3w. S\u0105 to specjalne, uproszczone iteratory, kt\u00f3re automatycznie obs\u0142uguj\u0105 stan i logik\u0119 next().</p> </li> </ul> <p>R\u00f3\u017cni\u0105 si\u0119 w sposobie przechowywania stanu:</p> <ul> <li> <p>Iteratory musz\u0105 r\u0119cznie przechowywa\u0107 stan mi\u0119dzy kolejnymi wywo\u0142aniami <code>__next__()</code>, co wymaga wi\u0119cej kodu i zarz\u0105dzania.</p> </li> <li> <p>Generatory automatycznie zapami\u0119tuj\u0105 stan wewn\u0119trzny przy ka\u017cdym wywo\u0142aniu <code>yield</code>, dzi\u0119ki czemu s\u0105 prostsze do implementacji.</p> </li> </ul> <p>R\u00f3\u017cni\u0105 si\u0119 w sposobie przechodzenia przez dane:</p> <ul> <li> <p>Iteratory zazwyczaj s\u0105 jednorazowe, ale je\u015bli iterator dzia\u0142a na strukturze danych, jak lista, mo\u017cna go ponownie utworzy\u0107 przez <code>iter()</code>.</p> </li> <li> <p>Generatory s\u0105 jednorazowego u\u017cytku \u2013 po przeiterowaniu przez wszystkie warto\u015bci ko\u0144cz\u0105 si\u0119, i nie mo\u017cna ich wznowi\u0107 od pocz\u0105tku.</p> </li> </ul> <p>Przyk\u0142ad:</p> <pre><code># Niestandardowy iterator, kt\u00f3ry iteruje od 1 do podanej liczby:\nclass CountUpTo:\n    def __init__(self, max_value):\n        self.max_value = max_value\n        self.current = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current &gt; self.max_value:\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n\ncounter = CountUpTo(3)\nfor number in counter:\n    print(number)\n</code></pre> <pre><code># Analogiczny generator z yield\ndef count_up_to(max_value):\n    current = 1\n    while current &lt;= max_value:\n        yield current\n        current += 1\n\nfor number in count_up_to(3):\n    print(number)\n</code></pre>"},{"location":"zaj02/generatory/#funkcje-generatorow","title":"Funkcje generator\u00f3w","text":"<p>Tworzymy je tak samo jak zwyk\u0142e funkcje, ale zamiast <code>return</code> u\u017cywamy <code>yield</code>, kt\u00f3ry zwraca warto\u015b\u0107, a nast\u0119pnie \"zawiesza\" dzia\u0142anie funkcji. Gdy po raz kolejny wywo\u0142ujemy <code>next()</code> na generatorze, funkcja kontynuuje od miejsca, w kt\u00f3rym ostatnio si\u0119 zatrzyma\u0142a.</p> <pre><code>def count_up_to(n):\n    count = 1\n    while count &lt;= n:\n        yield count  # Zwraca warto\u015b\u0107, ale kontynuuje dzia\u0142anie po wywo\u0142aniu next()\n        count += 1\n\n# Tworzymy generator\ncounter = count_up_to(5)\n\nprint(next(counter))  # 1\nprint(next(counter))  # 2\n# Mo\u017cemy te\u017c przeiterowa\u0107 przez ca\u0142y generator w p\u0119tli\nfor number in counter:\n    print(number)  #  3, 4, 5\n</code></pre>"},{"location":"zaj02/generatory/#wyrazenia-generatorow","title":"Wyra\u017cenia generator\u00f3w","text":"<p>To bardziej zwi\u0119z\u0142y spos\u00f3b na tworzenie generator\u00f3w, podobny do list sk\u0142adanych. R\u00f3\u017cni\u0105 si\u0119 jednak nawiasami: zamiast nawias\u00f3w kwadratowych <code>[]</code> (jak w listach sk\u0142adanych) u\u017cywamy nawias\u00f3w okr\u0105g\u0142ych <code>()</code>.</p> <pre><code>gen = (x ** 2 for x in range(5))\n\n# Kolejne warto\u015bci mo\u017cemy uzyska\u0107 wywo\u0142uj\u0105c next()\nprint(next(gen))  # 0\nprint(next(gen))  # 1\n\n# Lub iteruj\u0105c po generatorze w p\u0119tli\nfor value in gen:\n    print(value)  # 4, 9, 16\n</code></pre>"},{"location":"zaj02/generatory/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Napisz generator, kt\u00f3ry iteracyjnie zwraca nazwy dni tygodnia: od poniedzia\u0142ku do niedzieli. Nast\u0119pnie, u\u017cyj tego generatora w p\u0119tli, aby wy\u015bwietli\u0107 ka\u017cdy dzie\u0144 tygodnia. Dodatkowo, zademonstruj, jak mo\u017cna u\u017cy\u0107 tego generatora do pobrania tylko pierwszych trzech dni tygodnia bez konieczno\u015bci iterowania przez ca\u0142y tydzie\u0144.</li> </ol> Tip <p>To zadanie mo\u017cna wykona\u0107 zar\u00f3wno funkcj\u0105 jak i wyra\u017ceniem.</p>"},{"location":"zaj02/iteratory/","title":"\u2744\ufe0f Iteratory","text":""},{"location":"zaj02/iteratory/#iteratory","title":"Iteratory","text":"<p>Iterator to obiekt w Pythonie, kt\u00f3ry pozwala na sekwencyjne przetwarzanie element\u00f3w kolekcji (np. list, krotek, zbior\u00f3w) bez za\u0142adowania ca\u0142ej struktury do pami\u0119ci. Iteratory umo\u017cliwiaj\u0105 przechodzenie po elementach jeden po drugim, co jest efektywne, szczeg\u00f3lnie przy pracy z du\u017cymi zbiorami danych.</p> <p>Ka\u017cda p\u0119tla <code>for</code> dzia\u0142a na iteratorach w tle.</p> Jak dzia\u0142aj\u0105 iteratory? <ul> <li>Ka\u017cdy obiekt, kt\u00f3ry ma metod\u0119 <code>__iter__()</code> i <code>__next__()</code>, jest iteratorem.</li> <li>Metoda <code>__iter__()</code> zwraca iterator, a <code>__next__()</code> zwraca kolejny element. Gdy element\u00f3w zabraknie, zg\u0142aszany jest wyj\u0105tek <code>StopIteration</code>.</li> </ul> Po co nam iteratory? <ul> <li>Efektywno\u015b\u0107 pami\u0119ciowa: Przetwarzaj\u0105 elementy na bie\u017c\u0105co, nie musz\u0105 trzyma\u0107 ca\u0142ej kolekcji w pami\u0119ci.</li> <li>Nieko\u0144cz\u0105ce si\u0119 sekwencje: Mo\u017cna tworzy\u0107 iteratory, kt\u00f3re generuj\u0105 niesko\u0144czone sekwencje danych, np. liczby losowe.</li> </ul> <pre><code>liczby = [1, 2, 3]\nit = iter(liczby)\nprint(next(it))\nprint(next(it))\nprint(next(it))\n</code></pre>"},{"location":"zaj02/iteratory/#zadanie-dodatkowe","title":"\ud83d\udcdd Zadanie dodatkowe","text":"<p>Stw\u00f3rz w\u0142asny iterator (klas\u0119) <code>FibonacciIterator(max_elements)</code>, kt\u00f3ry generuje ci\u0105g liczb Fibonacciego. Ci\u0105g Fibonacciego to sekwencja, w kt\u00f3rej ka\u017cda kolejna liczba jest sum\u0105 dw\u00f3ch poprzednich, a zaczyna si\u0119 od 0 i 1.</p>"},{"location":"zaj02/lambda/","title":"\u2744\ufe0f Funkcje anonimowe - lambda","text":""},{"location":"zaj02/lambda/#funkcje-anonimowe-lambda","title":"Funkcje anonimowe \u2013 lambda","text":"<p>S\u0105 to kr\u00f3tkie, anonimowe funkcje, kt\u00f3re mo\u017cna definiowa\u0107 bez nadawania im nazwy. S\u0142u\u017c\u0105 one g\u0142\u00f3wnie do wykonywania prostych operacji, zw\u0142aszcza wtedy, gdy funkcja jest potrzebna tylko w jednym, konkretnym miejscu. Zamiast stosowa\u0107 pe\u0142n\u0105 definicj\u0119 funkcji z def, u\u017cywamy s\u0142owa kluczowego lambda, aby szybko stworzy\u0107 funkcj\u0119 w jednej linii.</p> <pre><code># Tak wygl\u0105da standardowo zdefiniowana funkcja\ndef add(x, y):\n    return x + y\nprint(add(3, 5))\n\n# A tak lambda\nadd = lambda x, y: x + y\nprint(add(3, 5))\n</code></pre>"},{"location":"zaj02/lambda/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Masz dan\u0105 list\u0119 s\u0142ownik\u00f3w reprezentuj\u0105cych informacje o ksi\u0105\u017ckach w bibliotece. Ka\u017cdy s\u0142ownik zawiera klucze: <code>tytul</code>, <code>autor</code> oraz <code>rok_wydania</code>.</li> </ol> <pre><code>ksiazki = [\n    {\"tytul\": \"W\u0142adca Pier\u015bcieni\", \"autor\": \"J.R.R. Tolkien\", \"rok_wydania\": 1954},\n    {\"tytul\": \"Harry Potter i Kamie\u0144 Filozoficzny\", \"autor\": \"J.K. Rowling\", \"rok_wydania\": 1997},\n    {\"tytul\": \"Duma i uprzedzenie\", \"autor\": \"Jane Austen\", \"rok_wydania\": 1813},\n    {\"tytul\": \"Rok 1984\", \"autor\": \"George Orwell\", \"rok_wydania\": 1949},\n    {\"tytul\": \"Zbrodnia i kara\", \"autor\": \"Fiodor Dostojewski\", \"rok_wydania\": 1866},\n    {\"tytul\": \"Mistrz i Ma\u0142gorzata\", \"autor\": \"Michai\u0142 Bu\u0142hakow\", \"rok_wydania\": 1967},\n    {\"tytul\": \"Hobbit\", \"autor\": \"J.R.R. Tolkien\", \"rok_wydania\": 1937},\n    {\"tytul\": \"Sto lat samotno\u015bci\", \"autor\": \"Gabriel Garc\u00eda M\u00e1rquez\", \"rok_wydania\": 1967},\n    {\"tytul\": \"Imi\u0119 r\u00f3\u017cy\", \"autor\": \"Umberto Eco\", \"rok_wydania\": 1980},\n    {\"tytul\": \"Solaris\", \"autor\": \"Stanis\u0142aw Lem\", \"rok_wydania\": 1961},\n]\n</code></pre> <p>Twoim zadaniem jest napisanie kodu, kt\u00f3ry wykonuje nast\u0119puj\u0105ce operacje przy u\u017cyciu funkcji lambda:</p> <ul> <li> <p>Sortowanie ksi\u0105\u017cek wed\u0142ug roku wydania: Posortuj list\u0119 ksi\u0105\u017cek w kolejno\u015bci rosn\u0105cej wed\u0142ug roku ich wydania.</p> </li> <li> <p>Filtracja ksi\u0105\u017cek wydanych po 2000 roku: Utw\u00f3rz now\u0105 list\u0119 zawieraj\u0105c\u0105 tylko te ksi\u0105\u017cki, kt\u00f3re zosta\u0142y wydane po roku 2000.</p> </li> <li> <p>Transformacja listy do listy tytu\u0142\u00f3w: Przekszta\u0142\u0107 oryginaln\u0105 list\u0119 ksi\u0105\u017cek w list\u0119 zawieraj\u0105c\u0105 tylko tytu\u0142y ksi\u0105\u017cek.</p> </li> </ul> <p>Wykorzystaj funkcje <code>sorted()</code>, <code>filter()</code> oraz <code>map()</code> w po\u0142\u0105czeniu z funkcjami lambda do realizacji zadania.</p>"},{"location":"zaj02/listy_skladane/","title":"\u2744\ufe0f Listy sk\u0142adane","text":""},{"location":"zaj02/listy_skladane/#listy-skadane","title":"Listy sk\u0142adane","text":"<p>Lista sk\u0142adana to wyra\u017cenie, kt\u00f3re pozwala na tworzenie nowych list w zwi\u0119z\u0142y spos\u00f3b, zwykle z u\u017cyciem p\u0119tli.</p> <pre><code>kwadraty = [x ** 2 for x in range(6)]\nprint(kwadraty)\n</code></pre> <pre><code>liczby = [1, 2, 3, 4, 5, 6]\nparzystosc = ['parzysta' if liczba % 2 == 0 else 'nieparzysta' for liczba in liczby]\nprint(parzystosc)\n</code></pre>"},{"location":"zaj02/petle/","title":"\u2744\ufe0f Wst\u0119p - p\u0119tle","text":""},{"location":"zaj02/petle/#petle-z-licznikami","title":"P\u0119tle z licznikami","text":"<p><code>range(n)</code> tworzy sekwencj\u0119 liczb od <code>0</code> do <code>n-1</code>. Mo\u017cemy u\u017cywa\u0107 tej funkcji do iteracji w p\u0119tli, np. do kontrolowania liczby powt\u00f3rze\u0144.</p> <pre><code>for i in range(6):\n    print(f\"Licznik: {i}\")\n</code></pre> <p>Funkcja <code>enumerate()</code> pozwala jednocze\u015bnie uzyska\u0107 indeks i warto\u015b\u0107 z listy.</p> <pre><code>owoce = [\"jab\u0142ko\", \"banan\", \"wi\u015bnia\"]\nfor idx, owoc in enumerate(owoce):\n    print(f\"Indeks: {idx}, Owoc: {owoc}\")\n</code></pre>"},{"location":"zaj02/petle/#skanowanie-sekwencji","title":"Skanowanie sekwencji","text":"<p>Skanowanie sekwencji oznacza przechodzenie przez ka\u017cdy element w li\u015bcie, krotce, lub innym iterowalnym obiekcie.</p> <pre><code>owoce = ['jab\u0142ko', 'banan', 'pomara\u0144cza']\nfor owoc in owoce:\n    print(owoc)\n</code></pre>"},{"location":"zaj02/petle/#przetasowanie-sekwencji","title":"Przetasowanie sekwencji","text":"<p><code>range(len(x))</code> iteruje po indeksach sekwencji. Mo\u017ce by\u0107 u\u017cyte do manipulacji elementami na podstawie ich indeks\u00f3w.</p> <pre><code>owoce = ['jab\u0142ko', 'banan', 'pomara\u0144cza']\nfor i in range(len(owoce)):\n    owoce[i] = owoce[i].upper()\nprint(owoce)\n</code></pre>"},{"location":"zaj02/petle/#przechodzenie-niewyczerpujace","title":"Przechodzenie niewyczerpuj\u0105ce","text":"<p><code>range(0, len(x), 2)</code> lub <code>x[::2]</code></p> <pre><code>liczby = [1, 2, 3, 4, 5, 6]\nfor i in range(0, len(liczby), 2):\n    print(liczby[i])\n\n# Alternatywnie, z u\u017cyciem slicing\nprint(liczby[::2])\n</code></pre>"},{"location":"zaj02/petle/#przechodzenie-rownolege","title":"Przechodzenie r\u00f3wnoleg\u0142e","text":"<p><code>zip</code> umo\u017cliwia r\u00f3wnoleg\u0142e iterowanie po wielu sekwencjach, a <code>map</code> stosuje funkcj\u0119 do ka\u017cdego elementu sekwencji.</p> <pre><code>imiona = ['Anna', 'Jan', 'Piotr']\nwieki = [25, 30, 35]\nfor imie, wiek in zip(imiona, wieki):\n    print(f\"{imie} ma {wiek} lat\")\n</code></pre> <pre><code>def kwadrat(liczba):\n    return liczba ** 2\n\nliczby = [1, 2, 3, 4]\nkwadraty = list(map(kwadrat, liczby))\nprint(kwadraty)\n</code></pre>"},{"location":"zaj02/petle/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Maj\u0105c dwie listy, <code>imiona = ['Anna', 'Jan', 'Ewa']</code> i <code>oceny = [5, 4, 3]</code>, u\u017cyj <code>zip</code> do stworzenia pary ka\u017cdego imienia z odpowiadaj\u0105c\u0105 mu ocen\u0105. Nast\u0119pnie, iteruj przez te pary, wy\u015bwietlaj\u0105c imi\u0119 wraz z ocen\u0105. Co si\u0119 stanie, je\u015bli listy b\u0119d\u0105 mia\u0142y r\u00f3\u017cne d\u0142ugo\u015bci?</p> </li> <li> <p>Maj\u0105c list\u0119 <code>liczby = [1, 2, 3, 4, 5]</code>, napisz funkcj\u0119 <code>kwadrat(x)</code>, kt\u00f3ra zwraca kwadrat liczby x. U\u017cyj map z t\u0105 funkcj\u0105, aby stworzy\u0107 now\u0105 list\u0119, w kt\u00f3rej ka\u017cdy element jest kwadratem odpowiadaj\u0105cego mu elementu z listy liczby. Wy\u015bwietl t\u0105 list\u0119.</p> </li> </ol>"},{"location":"zaj02/przypisania/","title":"\u2744\ufe0f Przypisania","text":""},{"location":"zaj02/przypisania/#przypisania","title":"Przypisania","text":"<p>W Pythonie przypisania zmiennych tworz\u0105 referencje do obiekt\u00f3w, co oznacza, \u017ce zmienne dzia\u0142aj\u0105 jak wska\u017aniki. Zmienne nie przechowuj\u0105 samych warto\u015bci, lecz odnosz\u0105 si\u0119 do obiekt\u00f3w w pami\u0119ci.</p> <p>Zmienne s\u0105 tworzone automatycznie przy pierwszym przypisaniu warto\u015bci, bez potrzeby deklarowania ich wcze\u015bniej.</p> <p>Przed u\u017cyciem zmiennej nale\u017cy najpierw przypisa\u0107 do niej warto\u015b\u0107, w przeciwnym razie Python zg\u0142osi b\u0142\u0105d.</p> <p>Rozpakowywanie pozwala przypisa\u0107 wiele warto\u015bci do zmiennych jednocze\u015bnie, np. z listy, krotki lub innej iterowalnej struktury.</p> <pre><code>a, b, c = [1, 2, 3]\n\nskladniki = ['m\u0105ka', 'jajka', 'mleko', 'cukier', 's\u00f3l']\nbaza, *glowne_skladniki, przyprawy = skladniki\nprint(f\"Baza przepisu to {baza}\")\nprint(f\"G\u0142\u00f3wne sk\u0142adniki to {glowne_skladniki}\")\nprint(f\"A {przyprawy} to u\u017cyte przyprawy.\")\n</code></pre>"},{"location":"zaj02/przypisania/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Maj\u0105c dan\u0105 krotk\u0119 <code>dane = (2024, 'Python', 3.8)</code>, przypisz ka\u017cdy element krotki do odpowiednich zmiennych: <code>rok</code>, <code>jezyk</code> i <code>wersja</code>. Wy\u015bwietl te zmienne.</p> </li> <li> <p>Maj\u0105c list\u0119 <code>oceny = [4, 3, 5, 2, 5, 4]</code>, przypisz pierwsz\u0105 warto\u015b\u0107 do zmiennej <code>pierwsza</code>, ostatni\u0105 do <code>ostatnia</code>, a pozosta\u0142e do listy <code>srodek</code>. Wykorzystaj <code>*</code> do zgromadzenia \u015brodkowych warto\u015bci. Wy\u015bwietl te zmienne.</p> </li> <li> <p>Dla krotki <code>info = ('Jan', 'Kowalski', 30, 'Polska', 'programista')</code>, przypisz imi\u0119 do zmiennej <code>imie</code>, nazwisko do <code>nazwisko</code>, a zaw\u00f3d do <code>zawod</code>, ignoruj\u0105c pozosta\u0142e warto\u015bci. Do ignorowania wykorzystaj znak <code>_</code>. Wy\u015bwietl przypisane zmienne.</p> </li> <li> <p>Maj\u0105c zagnie\u017cd\u017con\u0105 struktur\u0119 <code>dane = (2024, ['Python', 3.8, ('Stabilna', 'Wersja')])</code>, przypisz rok do zmiennej <code>rok</code>, nazw\u0119 j\u0119zyka do <code>jezyk</code>, wersj\u0119 do <code>wersja</code> i opis wersji do zmiennej <code>opis</code>. Wy\u015bwietl te zmienne.</p> </li> </ol>"},{"location":"zaj02/przypisania/#przypisania-z-wieloma-celami-i-wspodzielone-referencje","title":"Przypisania z wieloma celami i wsp\u00f3\u0142dzielone referencje","text":"<p>Wsp\u00f3\u0142dzielone referencje - zmienne mog\u0105 odnosi\u0107 si\u0119 do tego samego obiektu w pami\u0119ci. Zmiana jednego obiektu mo\u017ce mie\u0107 wp\u0142yw na inny, je\u015bli oba maj\u0105 t\u0119 sam\u0105 referencj\u0119.</p> <pre><code>a = b = [1, 2, 3]\nb[0] = 'zmieniono'\nprint(a, b)\n\n# Kopiowanie listy a do nowej listy c\nc = list(a)  # Mo\u017cna r\u00f3wnie\u017c u\u017cy\u0107 a[:] dla p\u0142ytkiej kopii\n\n# Modyfikacja pierwszego elementu w c\nc[0] = 'nowa warto\u015b\u0107'\n\n# Wy\u015bwietlenie wszystkich list\nprint(f\"Lista a: {a}, lista b: {b}, lista c: {c}\")\n</code></pre> Jaka p\u0142ytka i g\u0142\u0119boka kopia? <p>P\u0142ytka kopia tworzy now\u0105 instancj\u0119 obiektu, ale nie kopiuje obiekt\u00f3w wewn\u0119trznych (czyli element\u00f3w, do kt\u00f3rych ten obiekt odnosi si\u0119) (np. poprzez <code>copy.copy()</code>).</p> <p>G\u0142\u0119boka kopia tworzy now\u0105 instancj\u0119 obiektu, a tak\u017ce kopiuje wszystkie obiekty zagnie\u017cd\u017cone wewn\u0105trz niego. To oznacza, \u017ce g\u0142\u0119boka kopia tworzy ca\u0142kowicie now\u0105 struktur\u0119 danych, kt\u00f3ra nie wsp\u00f3\u0142dzieli referencji z oryginalnym obiektem (np. poprzez <code>copy.deepcopy()</code>).</p>"},{"location":"zaj02/przypisania/#zadania_1","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Stw\u00f3rz zmienn\u0105 <code>a</code> oraz <code>b</code>, u\u017cyj przypisania z wieloma celami i przypisz im list\u0119 [1, 2, 3]: <code>a = b = [1, 2, 3]</code>. Zmodyfikuj pierwszy element listy <code>b</code> przez przypisanie <code>b[0] = 'zmieniono'</code>. Wy\u015bwietl obie listy <code>a</code> i <code>b</code>, a nast\u0119pnie wyja\u015bnij, dlaczego zmiana w <code>b</code> wp\u0142yn\u0119\u0142a r\u00f3wnie\u017c na <code>a</code>. Czy listy s\u0105 obiektami mutowalnymi?</p> </li> <li> <p>Korzystaj\u0105c z poprzedniego przyk\u0142adu, utw\u00f3rz zmienn\u0105 <code>c</code> i przypisz jej kopi\u0119 listy <code>a</code> (mo\u017cesz u\u017cy\u0107 metody <code>list()</code> lub sk\u0142adni <code>a[:]</code>). Nast\u0119pnie zmodyfikuj pierwszy element w <code>c</code> i przypisz mu warto\u015b\u0107 <code>'nowa warto\u015b\u0107'</code>. Wy\u015bwietl listy <code>a</code>, <code>b</code> i <code>c</code>, zauwa\u017caj\u0105c, \u017ce tym razem zmiana w <code>c</code> nie wp\u0142yn\u0119\u0142a na <code>a</code> ani <code>b</code>. Wyja\u015bnij, dlaczego kopiowanie listy zapobieg\u0142o wsp\u00f3\u0142dzieleniu referencji.</p> </li> <li> <p>Utw\u00f3rz zmienn\u0105 <code>x</code> oraz <code>y</code>, przypisz im warto\u015b\u0107 <code>10</code> poprzez <code>x = y = 10</code>. Zwi\u0119ksz warto\u015b\u0107 <code>y</code> o 1 (np. <code>y = y + 1</code>). Wy\u015bwietl warto\u015bci <code>x</code> i <code>y</code>, a nast\u0119pnie wyja\u015bnij, dlaczego modyfikacja <code>y</code> nie wp\u0142yn\u0119\u0142a na warto\u015b\u0107 <code>x</code>. Czy integery s\u0105 obiektami mutowalnymi?</p> </li> </ol> Jakie obiekty mutowalne i niemutowalne? <p>W Pythonie obiekty dziel\u0105 si\u0119 na mutowalne (zmienne) i niemutowalne (niezmienne). Kluczow\u0105 r\u00f3\u017cnic\u0105 mi\u0119dzy nimi jest to, czy zawarto\u015b\u0107 obiektu mo\u017ce by\u0107 zmieniona w miejscu (bez tworzenia nowego obiektu) po jego utworzeniu.</p> <ul> <li>Obiekty mutowalne: Ich zawarto\u015b\u0107 mo\u017ce by\u0107 zmieniana po utworzeniu. Zmiany s\u0105 dokonywane bez tworzenia nowej referencji w pami\u0119ci. Na przyk\u0142ad: listy, s\u0142owniki czy zbiory (sets).</li> <li>Obiekty niemutowalne: Nie mo\u017cna zmieni\u0107 ich zawarto\u015bci. Ka\u017cda pr\u00f3ba modyfikacji tworzy nowy obiekt. Na przyk\u0142ad: liczby ca\u0142kowite (integers), liczby zmiennoprzecinkowe (floats), krotki (tuples) czy \u0142a\u0144cuchy znak\u00f3w (strings).</li> </ul> <pre><code># Przyk\u0142ad z obiektem mutowalnym - lista\nmut_list = [1, 2, 3]\nprint(\"Pocz\u0105tkowa lista:\", mut_list)\nprint(\"Pocz\u0105tkowy identyfikator listy:\", id(mut_list))\n\n# Zmiana elementu listy\nmut_list[0] = 'zmienione'\nprint(\"\\nLista po modyfikacji:\", mut_list)\nprint(\"Identyfikator listy po modyfikacji:\", id(mut_list))  # Ten sam identyfikator\n\n# Przyk\u0142ad z obiektem niemutowalnym - liczba ca\u0142kowita\nnum = 10\nprint(\"Pocz\u0105tkowa warto\u015b\u0107 num:\", num)\nprint(\"Pocz\u0105tkowy identyfikator num:\", id(num))\n\n# Zmiana warto\u015bci liczby\nnum = num + 1\nprint(\"\\nWarto\u015b\u0107 num po modyfikacji:\", num)\nprint(\"Identyfikator num po modyfikacji:\", id(num))  # Nowy identyfikator\n\n# Przyk\u0142ad z obiektem niemutowalnym - krotka\nprint(\"\\nObiekty niemutowalne (krotka):\")\nimmut_tuple = (1, 2, 3)\nprint(\"Pocz\u0105tkowa krotka:\", immut_tuple)\nprint(\"Pocz\u0105tkowy identyfikator krotki:\", id(immut_tuple))\n\n# Pr\u00f3ba modyfikacji krotki - TypeError\ntry:\n    immut_tuple[0] = 'zmienione'  # Spowoduje b\u0142\u0105d\nexcept TypeError as e:\n    print(\"\\nB\u0142\u0105d podczas modyfikacji krotki:\", e)\n</code></pre>"},{"location":"zaj02/przypisania/#przypisania-rozszerzone-i-wspodzielone-referencje","title":"Przypisania rozszerzone i wsp\u00f3\u0142dzielone referencje","text":"<p>Przypisania rozszerzone to operatory takie jak <code>+=</code>, <code>-=</code>, <code>*=</code>, kt\u00f3re modyfikuj\u0105 warto\u015b\u0107 zmiennej i przypisuj\u0105 wynik.</p> <pre><code>x = 5\nx += 2  # to samo co x = x + 2\nprint(x)\n</code></pre>"},{"location":"zaj02/przypisania/#zadania_2","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Wyzw\u00f3l nast\u0119puj\u0105cy kod, wy\u015bwietl K, L, M i N. Wyja\u015bnij w jaki spos\u00f3b konkatenacja zachowuje si\u0119 inaczej od przypisania rozszerzonego.</li> </ol> <pre><code>K = [1, 2]\nL = K\n# konkatenacja\nK = K + [3, 4]\nM = [1, 2]\nN = M\n# przypisanie rozszerzone\nM += [3, 4]\n</code></pre>"},{"location":"zaj02/przypisania/#sowa-zarezerwowane","title":"S\u0142owa zarezerwowane","text":"<p>S\u0142owa zarezerwowane w Pythonie maj\u0105 specjalne znaczenie i nie mog\u0105 by\u0107 u\u017cywane jako nazwy zmiennych. Przyk\u0142adami takich s\u0142\u00f3w s\u0105 <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>def</code>, <code>return</code> itp.</p>"},{"location":"zaj03/abstrakcyjne/","title":"\ud83e\udd55 Abstrakcyjne klasy nadrz\u0119dne","text":"<p>S\u0105 to klasy s\u0142u\u017c\u0105ce jako szablony, kt\u00f3re definiuj\u0105 struktur\u0119 i wymuszone metody dla klas pochodnych, ale same nie mog\u0105 by\u0107 inicjalizowane. U\u017cywaj\u0105 dekoratora <code>@abstractmethod</code> do oznaczenia metod, kt\u00f3re musz\u0105 by\u0107 zaimplementowane w klasach pochodnych.</p> Korzy\u015bci wynikaj\u0105ce z wykorzystywania abstrakcyjnych klas nadrz\u0119dnych <ul> <li>Sp\u00f3jno\u015b\u0107 \u2013 wymusza implementacj\u0119 okre\u015blonych metod.</li> <li>Reu\u017cywalno\u015b\u0107 \u2013 pozwala dzieli\u0107 metody mi\u0119dzy klasami.</li> <li>Polimorfizm \u2013 umo\u017cliwia jednolite u\u017cywanie r\u00f3\u017cnych klas.</li> </ul> <pre><code>from abc import ABC, abstractmethod\n\nclass Zwierze(ABC):\n    # Ta metoda jest abstrakcyjna,\n    # wymagana jest jej implementacja w klasach pochodnych\n    @abstractmethod\n    def wydaj_dzwiek(self):\n        pass\n\nclass Pies(Zwierze):\n    def wydaj_dzwiek(self):\n        return \"Hau hau!\"\n\nclass Kot(Zwierze):\n    def wydaj_dzwiek(self):\n        return \"Miau miau!\"\n</code></pre>"},{"location":"zaj03/dziedziczenie/","title":"\ud83e\udd55 Dziedziczenie","text":""},{"location":"zaj03/dziedziczenie/#wstep","title":"Wst\u0119p","text":"<p>Kluczowa cecha programowania obiektowego, pozwala na tworzenie nowych klas na bazie istniej\u0105cych. Umo\u017cliwia to wykorzystanie ju\u017c zdefiniowanych atrybut\u00f3w i metod w nowej klasie, co sprzyja oszcz\u0119dno\u015bci kodu i u\u0142atwia jego zarz\u0105dzanie.</p> <p>Uwaga</p> <p>Zwr\u00f3\u0107 uwag\u0119 w poni\u017cszym przyk\u0142adzie jak wygl\u0105da wywo\u0142ywanie konstruktor\u00f3w klas nadrz\u0119dnych.</p> <pre><code>class Pojazd:  # Klasa bazowa\n    def __init__(self, marka):\n        self.marka = marka\n\n    def uruchom(self):\n        print(f\"{self.marka} jest uruchamiany.\")\n\nclass Samochod(Pojazd):  # Klasa pochodna\n    def __init__(self, marka, model):\n        super().__init__(marka)  # Wywo\u0142anie konstruktora klasy bazowej\n        self.model = model\n</code></pre>"},{"location":"zaj03/dziedziczenie/#wyszukiwanie-dziedziczenia","title":"Wyszukiwanie dziedziczenia","text":"<p>Gdy obiekt wywo\u0142uje metod\u0119 lub uzyskuje dost\u0119p do atrybutu, Python rozpoczyna process wyszukiwania tego elementu zgodnie z tzw. MRO (Method Resolution Order) \u2013 to algorytm wyszukiwania dziedziczenia:</p> <ol> <li>Najpierw sprawdzana jest klasa, do kt\u00f3rej nale\u017cy dany obiekt (czyli klasa pochodna).</li> <li>Nast\u0119pnie sprawdzane s\u0105 klasy bazowe (superklasy) w kolejno\u015bci od najbli\u017cszej do najdalszej.</li> <li>Je\u015bli Python znajdzie odpowiedni element w pierwszej napotkanej klasie, ko\u0144czy poszukiwanie.</li> </ol> <p>Klasy mog\u0105 tak\u017ce dziedziczy\u0107 po wi\u0119cej ni\u017c jednej klasie - nazywamy to dziedziczeniem wielokrotnym. W takim wypadku wyszukiwanie z pkt. 2 odbywa si\u0119 od najbli\u017cszej klasy bazowej (wymieniona jako pierwsza przy definiowaniu dziedziczenia) do najdalszej.</p> <pre><code>class Pojazd:\n    def uruchom(self):\n        print(\"Pojazd jest uruchamiany.\")\n\nclass Silnik:\n    def uruchom(self):\n        print(\"Silnik jest uruchamiany.\")\n\nclass Samochod(Pojazd, Silnik):\n    pass\n\nmoj_samochod = Samochod()\nmoj_samochod.uruchom()\n\n## Zwraca: Pojazd jest uruchamiany.\n</code></pre> <p>Aby sprawdzi\u0107 kolejno\u015b\u0107 MRO, mo\u017cna u\u017cy\u0107 metody <code>.__mro__</code> lub funkcji <code>help()</code>:</p> <pre><code>print(Samochod.__mro__)\n</code></pre> <p>Je\u015bli metoda lub atrybut nie istnieje ani w klasie pochodnej, ani w \u017cadnej z klas bazowych, Python zg\u0142asza b\u0142\u0105d, np. <code>AttributeError</code>.</p>"},{"location":"zaj03/dziedziczenie/#nadpisywanie-overriding","title":"Nadpisywanie (overriding)","text":"<p>Process, w kt\u00f3rym klasa pochodna definiuje w\u0142asn\u0105 wersj\u0119 metody o tej samej nazwie, co metoda w klasie bazowej. Dzi\u0119ki temu klasa pochodna mo\u017ce zmieni\u0107 lub rozszerzy\u0107 dzia\u0142anie odziedziczonej metody, dostosowuj\u0105c j\u0105 do w\u0142asnych potrzeb.</p> Uwaga <p>Zwr\u00f3\u0107 uwag\u0119 w poni\u017cszym przyk\u0142adzie jak wygl\u0105da specjalizacja odziedziczonych metod.</p> <pre><code>class Pojazd:\n    def uruchom(self):\n        print(\"Pojazd jest uruchamiany.\")\n\nclass Samochod(Pojazd):\n    def uruchom(self):  # Nadpisywanie metody uruchom\n        print(\"Samoch\u00f3d jest uruchamiany szybciej!\")\n        super().uruchom()  # Wywo\u0142anie oryginalnej metody klasy bazowej\n\nmoj_samochod = Samochod()\nmoj_samochod.uruchom()\n</code></pre>"},{"location":"zaj03/introspekcja/","title":"\ud83e\udd55 Narz\u0119dzia introspekcji","text":"<p>Introspekcja pozwala na dynamiczne badanie obiekt\u00f3w, ich struktur oraz cech w czasie dzia\u0142ania programu.</p>"},{"location":"zaj03/introspekcja/#__class__","title":"<code>__class__</code>","text":"<p>Atrybut ten pozwala na sprawdzenie klasy, do kt\u00f3rej nale\u017cy dany obiekt.</p> <pre><code>class Zwierze:\n    pass\n\nclass Pies(Zwierze):\n    pass\n\nreksio = Pies()\nprint(reksio.__class__)  # &lt;class '__main__.Pies'&gt;\nprint(reksio.__class__.__name__)  # Pies\n</code></pre>"},{"location":"zaj03/introspekcja/#__dict__","title":"<code>__dict__</code>","text":"<p>Atrybut ten to s\u0142ownik, kt\u00f3ry przechowuje wszystkie atrybuty instancji obiektu. Dzi\u0119ki <code>__dict__</code> mo\u017cna dynamicznie uzyska\u0107 dost\u0119p do atrybut\u00f3w obiektu, modyfikowa\u0107 je, dodawa\u0107 now lub iterowa\u0107 po nich.</p> <pre><code>class Samochod:\n    def __init__(self, marka, model, rok):\n        self.marka = marka\n        self.model = model\n        self.rok = rok\n\nmoj_samochod = Samochod(\"Toyota\", \"Corolla\", 2020)\nprint(moj_samochod.__dict__) # {'marka': 'Toyota', 'model': 'Corolla', 'rok': 2020}\n</code></pre>"},{"location":"zaj03/klasy/","title":"\ud83e\udd55 Wst\u0119p - klasy i instancje","text":"<p>Jest to paradygmat programowania, kt\u00f3ry opiera si\u0119 na tworzeniu obiekt\u00f3w \u2013 element\u00f3w, kt\u00f3re \u0142\u0105cz\u0105 dane i logik\u0119 w sp\u00f3jn\u0105 ca\u0142o\u015b\u0107. Ka\u017cdy obiekt reprezentuje pewien byt (np. samoch\u00f3d, u\u017cytkownik, document) i posiada w\u0142asne w\u0142a\u015bciwo\u015bci oraz zachowania.</p>"},{"location":"zaj03/klasy/#klasa","title":"Klasa","text":"<p>Szablon lub przepis, kt\u00f3ry definiuje struktur\u0119 i zachowanie jej instancji. Klasa okre\u015bla, jakie atrybuty (cechy) i metody (dzia\u0142ania) b\u0119d\u0105 posiada\u0142y instancje nale\u017c\u0105ce do tej klasy. Przyk\u0142adowo, klasa <code>Samochod</code> mo\u017ce zawiera\u0107 takie atrybuty, jak <code>marka</code>, <code>model</code>, <code>rok</code>, a tak\u017ce metody jak <code>przyspiesz()</code> czy <code>hamuj()</code>.</p> <pre><code>class Samochod:\n    def __init__(self, marka, model, rok):\n        self.marka = marka\n        self.model = model\n        self.rok = rok\n</code></pre> <p>Gdy m\u00f3wimy o obiektach klasy, mamy na my\u015bli struktur\u0119 (sam\u0105 definicj\u0119), z kt\u00f3rych mo\u017cna tworzy\u0107 instancje.</p>"},{"location":"zaj03/klasy/#instancja","title":"Instancja","text":"<p>Konkretny egzemplarz klasy, stworzony na podstawie jej definicji. Instancje posiadaj\u0105 swoje w\u0142asne warto\u015bci atrybut\u00f3w, cho\u0107 wszystkie nale\u017c\u0105 do tej samej klasy.</p> <pre><code>moj_samochod = Samochod('Toyota', 'Corolla', 2020)\n</code></pre> <p>Obiekty instancji (lub po prostu instancje) to konkretne przyk\u0142ady danej klasy, kt\u00f3re istniej\u0105 w programie i posiadaj\u0105 w\u0142asne dane.</p>"},{"location":"zaj03/klasy/#atrybuty","title":"Atrybuty","text":"<p>Przechowuj\u0105 stan obiektu. Ka\u017cdy atrybut jest cz\u0119\u015bci\u0105 obiektu i przechowuje informacje specyficzne dla danej instancji klasy.</p> <p>Atrybuty mo\u017cna definiowa\u0107 w konstruktorze klasy (metodzie <code>__init__</code>), co umo\u017cliwia ka\u017cdej instancji posiadanie indywidualnych warto\u015bci.</p> <p>W naszym przyk\u0142adzie <code>marka</code>, <code>model</code> i <code>rok</code> to atrybuty.</p> <pre><code># Ka\u017cda instancja posiada swoje w\u0142asne (inne lub nie; unikatowe lub nie) warto\u015bci atrybut\u00f3w\nmoj_samochod = Samochod('Toyota', 'Corolla', 2020)\nkogos_innego_samochod = Samochod('Ford', 'Focus', 2018)\n</code></pre> <pre><code># Dost\u0119p do warto\u015bci atrybut\u00f3w danej instancji klasy\nprint(moj_samochod.model)\n</code></pre>"},{"location":"zaj03/klasy/#metody","title":"Metody","text":"<p>Funkcje zdefiniowane wewn\u0105trz klasy, kt\u00f3re operuj\u0105 na instancjach tej klasy i mog\u0105 zmienia\u0107 ich stan.</p> <p>Zwykle w pierwszym argumencie metody umieszcza si\u0119 <code>self</code>, co pozwala na dost\u0119p do atrybut\u00f3w i innych metod obiektu.</p> <pre><code># Rozszerzenie klasy Samochod o metod\u0119 przyspiesz\nclass Samochod:\n    def __init__(self, marka, model, rok):\n        self.marka = marka\n        self.model = model\n        self.rok = rok\n\n    def przyspiesz(self, wartosc: int = 10):\n        print(f\"{self.marka} {self.model} przyspiesza o {wartosc}!\")\n\nmoj_samochod.przyspiesz(20)  # wywo\u0142anie metody\n# Zwraca formatted string: Toyota Corolla przyspiesza o 20!\n</code></pre>"},{"location":"zaj03/metody/","title":"\ud83e\udd55 Rodzaje metod","text":""},{"location":"zaj03/metody/#metody-instancji","title":"Metody instancji","text":"<p>Domy\u015blny spos\u00f3b dzia\u0142ania, jako pierwszy argument przyjmuj\u0105 <code>self</code>, kt\u00f3ry odnosi si\u0119 do instancji.</p> <p>Zastosowanie: operacje na instancji</p>"},{"location":"zaj03/metody/#metody-klasy","title":"Metody klasy","text":"<p>Deklarowane za pomoc\u0105 dekoratora <code>@classmethod</code>. Przyjmuj\u0105 jako pierwszy argument <code>cls</code>, kt\u00f3ry odnosi si\u0119 do samej klasy, a nie jej instancji.</p> <pre><code>class Pracownik:\n    liczba_pracownikow = 0  # Atrybut klasy\n\n    def __init__(self, imie, stanowisko):\n        self.imie = imie\n        self.stanowisko = stanowisko\n        Pracownik.liczba_pracownikow += 1\n\n    @classmethod\n    def z_nazwiska(cls, nazwisko):\n        # Alternatywny konstruktor\n        return cls(nazwisko, 'Nieznane stanowisko')\n\n    @classmethod\n    def ustaw_liczbe_pracownikow(cls, liczba):\n        cls.liczba_pracownikow = liczba\n\n# Tworzenie instancji za pomoc\u0105 metody klasy\nnowy_pracownik = Pracownik.z_nazwiska('Kowalski')\nprint(nowy_pracownik.imie)           # Kowalski\nprint(nowy_pracownik.stanowisko)     # Nieznane stanowisko\n</code></pre> <p>Zastosowanie: operacje na klasie, alternatywne konstruktory</p>"},{"location":"zaj03/metody/#metody-statyczne","title":"Metody statyczne","text":"<p>Deklarowane za pomoc\u0105 dekoratora <code>@staticmethod</code>. Nie przyjmuj\u0105 \u017cadnego specjalnego pierwszego argumentu i nie maj\u0105 dost\u0119pu ani do instancji (<code>self</code>), ani do klasy (<code>cls</code>).</p> <pre><code>class Kalkulator:\n    @staticmethod\n    def dodaj(a, b):\n        return a + b\n\n    @staticmethod\n    def odejmij(a, b):\n        return a - b\n\n# Wywo\u0142ywanie metod statycznych\nprint(Kalkulator.dodaj(5, 3))     # 8\nprint(Kalkulator.odejmij(10, 4))  # 6\n</code></pre> <p>Zastosowanie: funkcje pomocnicze powi\u0105zane tematycznie</p>"},{"location":"zaj03/metody/#zadanie","title":"\ud83d\udcdd Zadanie","text":"<p>Zapoznaj si\u0119 z metodami w klasie z <code>geoapps.zajecia03.fleet.ambulance</code>.</p>"},{"location":"zaj03/obiektowe_poco/","title":"\ud83e\udd55 Po co programowa\u0107 obiektowo?","text":"<p>Programowanie obiektowe (OOP - ang. object-oriented programming) jest cz\u0119sto stosowane w celu uporz\u0105dkowania kodu i u\u0142atwienia zarz\u0105dzania z\u0142o\u017conymi projektami.</p>"},{"location":"zaj03/obiektowe_poco/#zalety","title":"Zalety","text":"<ul> <li>Modularno\u015b\u0107 i ponowne wykorzystanie kodu: OOP sprzyja tworzeniu modu\u0142owego kodu, gdzie klasy mo\u017cna wykorzysta\u0107 wielokrotnie w r\u00f3\u017cnych cz\u0119\u015bciach programu, co zmniejsza ilo\u015b\u0107 powtarzanego kodu i u\u0142atwia modyfikacje.</li> <li>Hermetyzacja: Dzi\u0119ki niej mo\u017cna ukry\u0107 szczeg\u00f3\u0142y implementacyjne klasy przed u\u017cytkownikami, kt\u00f3rzy korzystaj\u0105 tylko z interfejsu, co zwi\u0119ksza bezpiecze\u0144stwo kodu i minimalizuje ryzyko przypadkowego naruszenia wewn\u0119trznego stanu obiektu.</li> <li>Dziedziczenie: Pozwala na tworzenie nowych klas na bazie istniej\u0105cych, co sprzyja hierarchii i u\u0142atwia rozszerzanie funkcjonalno\u015bci, redukuj\u0105c potrzeb\u0119 pisania kodu od podstaw.</li> <li>Polimorfizm: Dzi\u0119ki polimorfizmowi r\u00f3\u017cne klasy mog\u0105 reagowa\u0107 na te same polecenia w odmienny spos\u00f3b, co upraszcza zarz\u0105dzanie r\u00f3\u017cnymi obiektami i zwi\u0119ksza elastyczno\u015b\u0107 kodu.</li> <li>Lepsze zarz\u0105dzanie z\u0142o\u017conymi systemami: OOP umo\u017cliwia tworzenie struktur, kt\u00f3re \u0142atwiej utrzyma\u0107 w du\u017cych projektach, co jest szczeg\u00f3lnie przydatne w z\u0142o\u017conych aplikacjach.</li> <li>\u0141atwo\u015b\u0107 utrzymania i modyfikacji: Kod obiektowy jest cz\u0119sto \u0142atwiejszy do utrzymania, poniewa\u017c klasy i obiekty mo\u017cna modyfikowa\u0107 niezale\u017cnie, bez wp\u0142ywu na inne cz\u0119\u015bci systemu.</li> </ul>"},{"location":"zaj03/obiektowe_poco/#wady","title":"Wady","text":"<ul> <li>Wymaga poprzedzaj\u0105cego planowania koncepcyjnego: Tworzenie kodu obiektowego wymaga wcze\u015bniejszego przemy\u015blenia architektury, co mo\u017ce by\u0107 czasoch\u0142onne, zw\u0142aszcza w mniejszych projektach.</li> <li>Z\u0142o\u017cono\u015b\u0107: Programowanie obiektowe mo\u017ce wydawa\u0107 si\u0119 skomplikowane, szczeg\u00f3lnie dla pocz\u0105tkuj\u0105cych, przez co trudniej nauczy\u0107 si\u0119 i wdro\u017cy\u0107 OOP w prostych aplikacjach.</li> <li>Ukrywanie stanu: Chocia\u017c hermetyzacja jest zalet\u0105, czasem mo\u017ce by\u0107 wad\u0105 \u2013 nie zawsze mamy pe\u0142ny dost\u0119p do informacji o obiekcie, co mo\u017ce ogranicza\u0107 elastyczno\u015b\u0107 kodu.</li> <li>Wydajno\u015b\u0107: Obiektowy kod jest zazwyczaj ci\u0119\u017cszy i wolniejszy ni\u017c podej\u015bcie proceduralne, co mo\u017ce mie\u0107 znaczenie w aplikacjach wymagaj\u0105cych wysokiej wydajno\u015bci.</li> <li>Nadmierna abstrakcja: Nadmierne stosowanie obiekt\u00f3w i klas mo\u017ce prowadzi\u0107 do abstrakcji, kt\u00f3re nie zawsze s\u0105 intuicyjne i mog\u0105 utrudnia\u0107 zrozumienie kodu.</li> <li>Nie zawsze najlepsze dopasowanie do przypadk\u00f3w u\u017cycia: W niekt\u00f3rych przypadkach, zw\u0142aszcza przy przetwarzaniu danych, podej\u015bcie proceduralne jest bardziej efektywne ni\u017c OOP, co sprawia, \u017ce stosowanie klas i obiekt\u00f3w mo\u017ce by\u0107 zb\u0119dne.</li> </ul>"},{"location":"zaj03/przeciazanie/","title":"\ud83e\udd55 Przeci\u0105\u017canie operator\u00f3w","text":"<p>Technika, kt\u00f3ra pozwala definiowa\u0107, jak klasy b\u0119d\u0105 odpowiada\u0107 na standardowe operacje, takie jak np. dodawanie, por\u00f3wnywanie czy wy\u015bwietlanie reprezentacji tekstowej.</p> <p>W Pythonie przeci\u0105\u017canie odbywa si\u0119 przez definiowanie w klasie specjalnych metod (tzw. dunder methods \u2013 od double underscore methods), kt\u00f3re zaczynaj\u0105 i ko\u0144cz\u0105 podw\u00f3jnym podkre\u015bleniem (np. <code>__init__</code>, <code>__add__</code> czy <code>__str__</code>).</p> <pre><code>class Wektor:\n    # Ta metoda odpowiada za inicjalizacj\u0119\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    # Metoda przeci\u0105\u017caj\u0105ca operator +\n    # Definiuje dodawanie wiektora do wektora\n    def __add__(self, inny_wektor):\n        return Wektor(self.x + inny_wektor.x, self.y + inny_wektor.y)\n\n    # Metoda przeci\u0105\u017caj\u0105ca operator &lt;\n    def __lt__(self, inny_wektor):\n        return (self.x**2 + self.y**2) &lt; (inny_wektor.x**2 + inny_wektor.y**2)\n\n    # Definiuje tekstow\u0105 reprezentacj\u0119 obiektu\n    def __str__(self):\n        return f\"Wektor({self.x}, {self.y})\"\n\nwektor1 = Wektor(2, 3)\nwektor2 = Wektor(1, 1)\nsuma = wektor1 + wektor2\nprint(suma)\nprint(wektor1 &lt; wektor2)\n</code></pre> Rozszerzona lista metod do przeci\u0105\u017cania operator\u00f3w Metoda Przeci\u0105\u017ca Wywo\u0142ywana dla <code>__init__</code> Konstruktor Tworzenie obiektu - <code>x = Klasa(args)</code> <code>__del__</code> Destructor Zwolnienie obiektu <code>x</code> <code>__add__</code> Operator <code>+</code> <code>x + y</code>, <code>x += y</code>, je\u015bli nie ma <code>__iadd__</code> <code>__or__</code> Operator ` ` (OR poziomu bitowego) <code>__repr__</code>, <code>__str__</code> Wy\u015bwietlanie, konwersje <code>print(x)</code>, <code>repr(x)</code>, <code>str(x)</code> <code>__call__</code> Wywo\u0142anie funkcji <code>x(*args, **kargs)</code> <code>__getattr__</code> Odczytanie atrybutu <code>x.niezdefiniowany_atrybuty</code> <code>__setattr__</code> Przypisanie atrybutu <code>x.atrybut = wartosc</code> <code>__delattr__</code> Usuwanie atrybutu <code>del x.atrybut</code> <code>__getattribute__</code> Przechwytywanie atrybutu <code>x.atrybut</code> <code>__getitem__</code> Indeksowanie, wycinanie, iteracje <code>x[klucz]</code>, <code>x[i:j]</code>, p\u0119tle <code>for</code> oraz inne iteracje, je\u015bli nie ma <code>__iter__</code> <code>__setitem__</code> Przypisanie indeksu i wycinka <code>x[klucz] = wartosc</code>, <code>x[i:j] = sekwencja</code> <code>__delitem__</code> Usuwanie indeksu i wycinka <code>del x[klucz]</code>, <code>del x[i:j]</code> <code>__len__</code> D\u0142ugo\u015b\u0107 <code>len(x)</code>, testy prawdziwo\u015bci, je\u015bli nie ma <code>__bool__</code> <code>__bool__</code> Testy logiczne <code>bool(x)</code>, testy prawdziwo\u015bci <code>__lt__</code>, <code>__gt__</code>, <code>__le__</code>, <code>__ge__</code>, <code>__eq__</code>, <code>__ne__</code> Por\u00f3wnania <code>x &lt; y</code>, <code>x &gt; y</code>, <code>x &lt;= y</code>, <code>x &gt;= y</code>, <code>x == y</code>, <code>x != y</code> <code>__radd__</code> Prawostronny operator <code>+</code> <code>nieinstancja + x</code> <code>__iadd__</code> Dodawanie w miejscu (rozszerzone) <code>x += y</code> <code>__iter__</code>, <code>__next__</code> Konteksty iteracyjne <code>i = iter(x)</code>, <code>next(i)</code>; p\u0119tle <code>for</code>, je\u015bli nie ma <code>__contains__</code>, testy <code>in</code>, wszystkie listy sk\u0142adanie, funkcje <code>map(f,x)</code> <code>__contains__</code> Test przynale\u017cno\u015bci <code>item in x</code> (dowolny iterator) <code>__index__</code> Warto\u015b\u0107 ca\u0142kowita <code>hex(x)</code>, <code>bin(x)</code>, <code>oct(x)</code>, <code>o[x]</code>, <code>o[x:]</code> <code>__enter__</code>, <code>__exit__</code> Mened\u017cer konktekstu <code>with obj as var:</code> <code>__get__</code>, <code>__set__</code>, <code>__delete__</code> Atrybuty deskryptor\u00f3w <code>x.attr</code>, <code>x.attr = value</code>, <code>del x.attr</code> <code>__new__</code> Tworzenie instancji Tworzenie instancji, przed <code>__init__</code>"},{"location":"zaj03/przyklad/","title":"\ud83e\udd55\ud83d\udcdd Zadanie - przyk\u0142ad","text":"<p>Wejd\u017a do repozytorium, zapoznaj si\u0119 z gotowym kodem w pliku <code>main_zajecia03.py</code> oraz modu\u0142ami w folderze <code>geoapps/zajecia03</code>.</p> <p>Zwr\u00f3\u0107 uwag\u0119 na:</p> <ul> <li>Tworzenie konstruktor\u00f3w - <code>__init__</code>,</li> <li>Dodawanie metod,</li> <li>Tekstow\u0105 reprezentacj\u0119 klas - <code>__str__</code> oraz <code>__repr__</code> (jak przyk\u0142ad przeci\u0105\u017cania operator\u00f3w),</li> <li>Dostosowywanie klas poprzez klasy podrz\u0119dne.</li> </ul>"},{"location":"zaj03/pseudoprywatne/","title":"\ud83e\udd55 Atrybuty pseudoprywatne","text":"<p>Atrybuty, kt\u00f3rych nazwy zaczynaj\u0105 si\u0119 od dw\u00f3ch podkre\u015blnik\u00f3w, np. <code>__nazwa</code>. Taka konwencja nazw powoduje, \u017ce Python stosuje name mangling \u2013 czyli zmienia nazw\u0119 atrybutu w taki spos\u00f3b, \u017ce jest trudniej dost\u0119pna z zewn\u0105trz klasy, ale nie jest ca\u0142kowicie prywatna. Jest to bardziej forma ochrony, ni\u017c pe\u0142ne ukrycie atrybut\u00f3w.</p> <pre><code>class MojaKlasa:\n    def __init__(self):\n        self.__ukryty_atrybut = \"tajne\"\n\n    def pokaz_ukryty(self):\n        return self.__ukryty_atrybut\n\nobiekt = MojaKlasa()\nprint(obiekt.pokaz_ukryty())  # Poprawne: \"tajne\"\nprint(obiekt._MojaKlasa__ukryty_atrybut)  # Dost\u0119p poprzez name mangling: \"tajne\"\n</code></pre> Po co u\u017cywa\u0107 atrybut\u00f3w pseudoprywatnych? <ul> <li>Ochrona przed przypadkowym nadpisaniem \u2013 przy dziedziczeniu klasy istnieje mniejsze ryzyko, \u017ce klasa pochodna przypadkowo nadpisze atrybut o tej samej nazwie.</li> <li>Czytelno\u015b\u0107 \u2013 pokazuj\u0105, \u017ce atrybut nie jest przeznaczony do bezpo\u015bredniego u\u017cytku z zewn\u0105trz klasy.</li> </ul>"},{"location":"zaj03/sloty/","title":"\ud83e\udd55 Sloty","text":"<p>Specjalny mechanizm, kt\u00f3ry pozwala na optymalizacj\u0119 pami\u0119ci obiekt\u00f3w klasy, poprzez ograniczenie listy atrybut\u00f3w, kt\u00f3re mo\u017cna doda\u0107 do instancji danej klasy.</p> <pre><code>class Osoba:\n    __slots__ = ['imie', 'wiek']  # Ograniczamy atrybuty tylko do 'imie' i 'wiek'\n\n    def __init__(self, imie, wiek):\n        self.imie = imie\n        self.wiek = wiek\n\nosoba = Osoba(\"Jan\", 30)\nprint(osoba.imie)  # Jan\nprint(osoba.wiek)  # 30\n\n# Pr\u00f3ba dodania nowego atrybutu zg\u0142osi b\u0142\u0105d\nosoba.address = \"Warszawa\"  # AttributeError: 'Osoba' object has no attribute 'address'\n</code></pre> <p>Python przestaje u\u017cywa\u0107 dynamicznego s\u0142ownika <code>__dict__</code> do przechowywania atrybut\u00f3w obiektu, co ogranicza mo\u017cliwo\u015b\u0107 dodawania nowych atrybut\u00f3w poza tymi zdefiniowanymi w <code>__slots__</code>, ale jednocze\u015bnie zmniejsza ilo\u015b\u0107 zu\u017cywanej pami\u0119ci.</p>"},{"location":"zaj03/wbudowane/","title":"\ud83e\udd55 Rozszerzanie typ\u00f3w wbudowanych","text":"<p>Mo\u017ce by\u0107 przydatne, gdy chcemy doda\u0107 dodatkow\u0105 funkcjonalno\u015b\u0107 lub dostosowa\u0107 zachowanie istniej\u0105cych typ\u00f3w (np. <code>list</code>, <code>dict</code>, <code>str</code>) do specyficznych potrzeb projektu.</p>"},{"location":"zaj03/wbudowane/#za-pomoca-osadzania-kompozycja","title":"Za pomoc\u0105 osadzania (kompozycja)","text":"<p>Poprzez utworzenie nowej klasy, kt\u00f3ra wewn\u0119trznie przechowuje instancj\u0119 typu wbudowanego jako atrybut.</p> <p>W ten spos\u00f3b klasa ta mo\u017ce wykorzystywa\u0107 typ wbudowany i rozszerza\u0107 jego funkcjonalno\u015b\u0107, deleguj\u0105c operacje na ten typ, ale nie dziedziczy jego metod bezpo\u015brednio. Osadzanie jest przydatne, gdy chcemy doda\u0107 now funkcje bez ingerencji w istniej\u0105ce metody typu wbudowanego.</p> <pre><code>class MojaLista:\n    def __init__(self, elementy):\n        self._lista = elementy  # Osadzenie typu wbudowanego list\n\n    def suma(self):\n        return sum(self._lista)\n\n    def dodaj(self, element):\n        self._lista.append(element)\n\n    def __str__(self):\n        return str(self._lista)\n\nmoja_lista = MojaLista([1, 2, 3])\nmoja_lista.dodaj(4)\nprint(moja_lista)        # [1, 2, 3, 4]\nprint(moja_lista.suma()) # 10\n</code></pre>"},{"location":"zaj03/wbudowane/#za-pomoca-klas-podrzednych-dziedziczenia","title":"Za pomoc\u0105 klas podrz\u0119dnych (dziedziczenia)","text":"<p>Poprzez utworzenie klasy podrz\u0119dnej, kt\u00f3ra dziedziczy po typie wbudowanym. Dzi\u0119ki temu klasa podrz\u0119dna automatycznie przejmuje wszystkie metody i atrybuty typu bazowego, co pozwala na \u0142atwe dodanie nowych funkcji lub nadpisanie istniej\u0105cych metod.</p> <pre><code>class MojaLista(list):\n    def suma(self):\n        return sum(self)\n\nmoja_lista = MojaLista([1, 2, 3, 4])\nprint(moja_lista)         # [1, 2, 3, 4]\nprint(moja_lista.suma())  # 10\n</code></pre>"},{"location":"zaj03/wbudowane/#za-i-przeciw","title":"Za i przeciw","text":"Za i przeciw dla obu sposob\u00f3w Za Przeciw Osadzanie Daje pe\u0142n\u0105 kontrol\u0119 nad metodami, kt\u00f3re s\u0105 dost\u0119pne dla u\u017cytkownika klasy. Izoluje funkcjonalno\u015b\u0107 rozszerzonego typu od interfejsu klasy bazowej, co mo\u017ce zwi\u0119kszy\u0107 bezpiecze\u0144stwo i u\u0142atwi\u0107 utrzymanie kodu. Wymaga r\u0119cznego implementowania delegacji metod, je\u015bli potrzebujemy pe\u0142nego dost\u0119pu do funkcji typu wbudowanego. Mo\u017ce by\u0107 mniej wydajne i bardziej czasoch\u0142onne ni\u017c dziedziczenie, je\u015bli chcemy u\u017cywa\u0107 wi\u0119kszo\u015bci metod typu wbudowanego. Dziedziczenie Klasa pochodna automatycznie przejmuje wszystkie metody typu wbudowanego, co u\u0142atwia tworzenie nowych funkcji. Jest bardziej ekonomiczne i intuicyjne w implementacji, szczeg\u00f3lnie gdy potrzebujemy tylko kilku dodatkowych funkcji. Trudniej jest zmodyfikowa\u0107 spos\u00f3b dzia\u0142ania niekt\u00f3rych metod w typach wbudowanych, poniewa\u017c metody te mog\u0105 wywo\u0142ywa\u0107 bezpo\u015brednie operacje na strukturze danych. Dziedziczenie mo\u017ce prowadzi\u0107 do problem\u00f3w z nieoczekiwanym zachowaniem, je\u015bli metody typu wbudowanego nie s\u0105 dobrze przystosowane do nowych funkcji klasy pochodnej."},{"location":"zaj03/zadania/","title":"\ud83e\udd55\ud83d\udcdd Zadania","text":"<p>Dodaj nast\u0119puj\u0105ce funkcjonalno\u015bci do programu przedstawionego jako przyk\u0142ad. Dla wszystkich dodanych funkcjonalno\u015bci stw\u00f3rz przyk\u0142adowy kod potwierdzaj\u0105cy, \u017ce dzia\u0142aj\u0105 (rozbudowuj\u0105c kod w <code>main_zajecia03.py</code>).</p> <ol> <li> <p>Zmodyfikuj ka\u017cd\u0105 klas\u0119 tak, \u017ceby posiada\u0142a atrybut <code>__max_id</code>, kt\u00f3ry b\u0119dzie wykorzystywany do nadawania identyfikator\u00f3w kolejnym stworzonym instancjom (zamiast podawania go jako argument przy inicjalizacji).</p> </li> <li> <p>Rozbuduj klas\u0119 <code>Incident</code> o priorytet zdarzenia, czas zg\u0142oszenia i informacje o zg\u0142aszaj\u0105cym.</p> </li> <li> <p>Zaprojektuj w ramach subpakietu <code>fleet</code> klas\u0119 <code>Station</code>, ka\u017cda stacja ma posiada\u0107 identyfikator, lokalizacj\u0119, karetk\u0119, kierowc\u0119 i 1 dodatkowego pracownika. Napisz metod\u0119, kt\u00f3ra sprawdza czy karetka jest na miejscu (czy zgadzaj\u0105 si\u0119 lokalizacje).</p> </li> <li> <p>Rozbuduj aplikacj\u0119 (w tym zaprojektuj logik\u0119, ale tak\u017ce elementy, kt\u00f3re trzeba doda\u0107 w r\u00f3\u017cnych klasach (niekoniecznie istniej\u0105cych) o mo\u017cliwo\u015b\u0107 zarz\u0105dzania incydentami \u2013 przydzielanie karetek do zg\u0142aszanych zdarze\u0144. Te funkcjonalno\u015bci musz\u0105 uwzgl\u0119dnia\u0107:</p> <ul> <li>Priorytet i czas, kt\u00f3ry up\u0142yn\u0105\u0142 od zg\u0142oszenia,</li> <li>Aktualny stan, w kt\u00f3rym znajduje si\u0119 karetka,</li> <li>Odleg\u0142o\u015b\u0107 karetki od zdarzenia.</li> </ul> </li> </ol>"},{"location":"zaj04/dokumentacja/","title":"\ud83e\uddf0 Prowadzenie dokumentacji","text":"Jest to kluczowy element tworzenia czytelnego i dobrze utrzymanego kodu! <p>Odpowiednia dokumentacja nie tylko u\u0142atwia wsp\u00f3\u0142prac\u0119 z innymi programistami, ale r\u00f3wnie\u017c pomaga nam wr\u00f3ci\u0107 do kodu po czasie. W Pythonie dokumentacja klas i funkcji odbywa si\u0119 g\u0142\u00f3wnie przy u\u017cyciu docstring\u00f3w, kt\u00f3re stanowi\u0105 tekstow\u0105 informacj\u0119 o celu i sposobie dzia\u0142ania kodu.</p>"},{"location":"zaj04/dokumentacja/#docstring","title":"Docstring","text":"<p>Docstring to text pomi\u0119dzy potr\u00f3jnymi cudzys\u0142owami (<code>\"\"\"</code>) lub apostrofami (<code>'''</code>), kt\u00f3ry umieszczamy zaraz po definicji klasy, funkcji lub modu\u0142u. Docstring jest dost\u0119pny za pomoc\u0105 specjalnego atrybutu <code>__doc__</code> i mo\u017ce by\u0107 przetwarzany przez narz\u0119dzia dokumentacyjne (np. Sphinx, PyDoc).</p> <p>Popularne s\u0105 r\u00f3\u017cne style dokumentacji docstring, np. w standardzie PEP 257, Google Style czy Numpydoc Style.</p> Przyk\u0142ad dokumentacji funkcji z u\u017cyciem Google Docstring Style <pre><code>def calculate_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        length (float): The length of the rectangle.\n        width (float): The width of the rectangle.\n\n    Returns:\n        float: The calculated area of the rectangle.\n\n    Raises:\n        ValueError: If length or width is negative.\n    \"\"\"\n    if length &lt; 0 or width &lt; 0:\n        raise ValueError(\"Length and width must be non-negative.\")\n    return length * width\n</code></pre> Przyk\u0142ad dokumentacji klasy z u\u017cyciem Google Docstring Style <pre><code>class Rectangle:\n    \"\"\"\n    A class to represent a rectangle shape.\n\n    Attributes:\n        length (float): The length of the rectangle.\n        width (float): The width of the rectangle.\n\n    Methods:\n        area(): Calculates the area of the rectangle.\n        perimeter(): Calculates the perimeter of the rectangle.\n    \"\"\"\n\n    def __init__(self, length, width):\n        \"\"\"\n        Initialize a new rectangle instance.\n\n        Args:\n            length (float): The length of the rectangle.\n            width (float): The width of the rectangle.\n        \"\"\"\n        self.length = length\n        self.width = width\n\n    def area(self):\n        \"\"\"\n        Calculate the area of the rectangle.\n\n        Returns:\n            float: The area of the rectangle.\n        \"\"\"\n        return self.length * self.width\n\n    def perimeter(self):\n        \"\"\"\n        Calculate the perimeter of the rectangle.\n\n        Returns:\n            float: The perimeter of the rectangle.\n        \"\"\"\n        return 2 * (self.length + self.width)\n</code></pre>"},{"location":"zaj04/dokumentacja/#wykorzystanie-dokumentacji-przez-nowoczesne-ide","title":"Wykorzystanie dokumentacji przez nowoczesne IDE","text":"<p>IDE (ang. Integrated Development Environment) - Zintegrowane \u015arodowisko Programistyczne, czyli Pycharm czy Visual Studio Code</p> <p>IDE potrafi\u0105 automatycznie odczytywa\u0107 docstringi i udost\u0119pnia\u0107 je u\u017cytkownikowi podczas pisania kodu. Dzi\u0119ki temu, gdy tylko zaczynamy korzysta\u0107 z funkcji lub klasy, IDE wy\u015bwietla podpowiedzi o dost\u0119pnych argumentach, typach danych, zwracanych warto\u015bciach, a tak\u017ce szczeg\u00f3\u0142y dotycz\u0105ce wyj\u0105tk\u00f3w, kt\u00f3re mog\u0105 zosta\u0107 zg\u0142oszone. Docstringi dostarczaj\u0105 r\u00f3wnie\u017c szczeg\u00f3\u0142owych informacji w panelach dokumentacji lub poprzez <code>hover</code> (najechanie mysz\u0105 na nazw\u0119 funkcji lub klasy), co znacz\u0105co przyspiesza prac\u0119 i pozwala lepiej zrozumie\u0107 dzia\u0142anie kodu bez konieczno\u015bci przegl\u0105dania ca\u0142ej jego implementacji.</p> <p></p>"},{"location":"zaj04/dokumentacja/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Dodaj dokumentacj\u0119 dla wybranej przez siebie funkcji.</li> </ol>"},{"location":"zaj04/nazewnictwo/","title":"\ud83e\uddf0 Konwencja nazewnictwa","text":"<p>\u017beby otrzyma\u0107 kod czytelny, sp\u00f3jny z innymi projektami i \u0142atwy w utrzymaniu w zespole, wykorzystuje si\u0119 konwencj\u0119 nazewnictwa na podstawie PEP 8 (standard i przewodnik stylu w Pythonie). </p> <p>Najwa\u017cniejsze konwencje:</p> <ol> <li> <p>Zmienne lokalne</p> <ul> <li>Styl: <code>snake_case</code> </li> <li>Przyk\u0142ad: <code>total_count</code> </li> <li>Opis: Ma\u0142e litery, s\u0142owa oddzielone podkre\u015bleniem. Najcz\u0119\u015bciej u\u017cywany styl.</li> </ul> </li> <li> <p>Funkcje</p> <ul> <li>Styl: <code>snake_case</code> </li> <li>Przyk\u0142ad: <code>calculate_average()</code> </li> <li>Opis: Nazwa opisowa, zawiera czasownik \u2013 m\u00f3wi, co robi funkcja.</li> </ul> </li> <li> <p>Klasy</p> <ul> <li>Styl: <code>PascalCase</code> </li> <li>Przyk\u0142ad: <code>DataProcessor</code> </li> <li>Opis: Ka\u017cde s\u0142owo wielk\u0105 liter\u0105, bez podkre\u015ble\u0144. Stosowane te\u017c do wyj\u0105tk\u00f3w.</li> </ul> </li> <li> <p>Sta\u0142e (np. konfiguracja)</p> <ul> <li>Styl: <code>UPPER_CASE</code> </li> <li>Przyk\u0142ad: <code>MAX_BUFFER_SIZE = 1024</code> </li> <li>Opis: Du\u017ce litery, s\u0142owa oddzielone podkre\u015bleniem. Sta\u0142e konfiguracyjne i warto\u015bci niezmienne.</li> </ul> <pre><code># Sta\u0142e\nPI = 3.14159\nMAX_CONNECTIONS = 10\nDEFAULT_TIMEOUT = 30  # sekundy\n\ndef calculate_circle_area(radius):\n    return PI * radius**2\n\nprint(f\"Pole ko\u0142a o promieniu 2: {calculate_circle_area(2)}\")\n\n# U\u017cycie sta\u0142ych konfiguracyjnych\ndef connect_to_server(timeout=DEFAULT_TIMEOUT):\n    print(f\"\u0141\u0105czenie z serwerem... (timeout: {timeout}s)\")\n\nconnect_to_server()\n</code></pre> </li> <li> <p>Nazwa modu\u0142\u00f3w / plik\u00f3w</p> <ul> <li>Styl: <code>snake_case</code> </li> <li>Przyk\u0142ad: <code>data_utils.py</code> </li> <li>Opis: Ma\u0142e litery i podkre\u015blenia. Nazwy powinny by\u0107 kr\u00f3tkie i opisowe.</li> </ul> </li> <li> <p>Nazwy pakiet\u00f3w</p> <ul> <li>Styl: <code>lowercase</code> </li> <li>Przyk\u0142ad: <code>analytics</code> </li> <li>Opis: Zazwyczaj jedno s\u0142owo, wszystkie litery ma\u0142e.</li> </ul> </li> <li> <p>Prywatne zmienne lub funkcje - umowna konwencja</p> <ul> <li>Styl: <code>_snake_case</code> </li> <li>Przyk\u0142ad: <code>_internal_use_only()</code> </li> <li>Opis: Jeden podkre\u015blnik sugeruje, \u017ce dany element (zmienna, funkcja) jest przeznaczony wy\u0142\u0105cznie do u\u017cytku wewn\u0119trznego w module lub klasie. Nie s\u0105 importowane przez <code>from module import *</code>.</li> </ul> <pre><code>_internal_variable = \"prywatna zmienna\"\n\ndef _helper_function():\n    return \"wewn\u0119trzna funkcja\"\n</code></pre> </li> <li> <p>Naprawd\u0119 prywatne zmienne/metody (w klasie)</p> <ul> <li>Styl: <code>__snake_case</code> </li> <li>Przyk\u0142ad: <code>__very_private</code> </li> <li>Opis: Aktywuj\u0105 mechanizm name mangling \u2013 Python przekszta\u0142ca nazw\u0119 wewn\u0119trznie, aby unikn\u0105\u0107 kolizji nazw w klasach dziedzicz\u0105cych. Najcz\u0119\u015bciej u\u017cywane w klasach do oznaczania \"naprawd\u0119 prywatnych\" atrybut\u00f3w lub metod.</li> </ul> <pre><code>class MyClass:\n    def __init__(self):\n        self.__private = 42  # Python zmienia to na _MyClass__private\n\nobj = MyClass()\nprint(obj._MyClass__private)  # Dost\u0119p nadal mo\u017cliwy, ale nazwa zosta\u0142a ukryta\n</code></pre> </li> <li> <p>Metody specjalne (magiczne)</p> <ul> <li>Styl: <code>__dunder__</code> </li> <li>Przyk\u0142ad: <code>__init__</code>, <code>__str__</code> </li> <li>Opis: Metody specjalne u\u017cywane przez interpreter. Nie tworzymy w\u0142asnych nazw w tym stylu!</li> </ul> </li> </ol>"},{"location":"zaj04/pakiety/","title":"\ud83e\uddf0 Pakiety","text":""},{"location":"zaj04/pakiety/#wstep","title":"Wst\u0119p","text":"PRZYPOMNIENIE - czym jest modu\u0142? <p>Modu\u0142 w Pythonie to plik z rozszerzeniem <code>.py</code>, kt\u00f3ry zawiera kod \u2013 mo\u017ce to by\u0107 pojedyncza funkcja, klasa, a nawet ca\u0142y zestaw narz\u0119dzi. Modu\u0142y pozwalaj\u0105 nam na przechowywanie kodu w osobnych plikach i \u0142atwe jego importowanie oraz u\u017cywanie w innych miejscach.</p> <p>Kiedy u\u017cywamy instrukcji <code>import</code>, Python pr\u00f3buje znale\u017a\u0107 odpowiedni modu\u0142 w okre\u015blonych lokalizacjach, kt\u00f3re s\u0105 przechowywane w zmiennej <code>sys.path</code>. Lista tych \u015bcie\u017cek obejmuje:</p> <ul> <li>Bie\u017c\u0105cy katalog roboczy \u2013 katalog, z kt\u00f3rego uruchamiamy skrypt.</li> <li>Katalogi standardowe Pythona \u2013 \u015bcie\u017cki z bibliotekami standardowymi.</li> <li>Katalogi specyficzne dla instalacji \u2013 katalogi, kt\u00f3re mog\u0105 zawiera\u0107 dodatkowe modu\u0142y lub pakiety, np. zainstalowane za pomoc\u0105 <code>pip</code>.</li> </ul> <p>U siebie mo\u017cemy to zobaczy\u0107 u\u017cywaj\u0105c:</p> <pre><code>import sys\nprint(sys.path)\n</code></pre>"},{"location":"zaj04/pakiety/#przygotowanie-struktury-projektu","title":"Przygotowanie struktury projektu","text":""},{"location":"zaj04/pakiety/#wprowadzenie-do-pakietow","title":"Wprowadzenie do pakiet\u00f3w","text":"<p>Pakiet w Pythonie to katalog (folder) zawieraj\u0105cy modu\u0142y. Pakiety pozwalaj\u0105 na hierarchiczne organizowanie kodu, co jest szczeg\u00f3lnie u\u017cyteczne w wi\u0119kszych projektach. Ka\u017cdy pakiet jest katalogiem, kt\u00f3ry powinien zawiera\u0107 plik <code>__init__.py</code>, aby Python m\u00f3g\u0142 go rozpozna\u0107 jako pakiet.</p> <p>Pakiety mog\u0105 by\u0107 zagnie\u017cd\u017cane w innych pakietach, tworz\u0105c struktur\u0119 drzewiast\u0105. Przyk\u0142adowa struktura pakietu <code>geoapps</code> mog\u0142aby wygl\u0105da\u0107 tak:</p> <pre><code>nasz-projekt/\n\u251c\u2500\u2500 geoapps/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 zajecia01/\n\u2502          \u251c\u2500\u2500 __init__.py\n\u2502          \u251c\u2500\u2500 dodawanie.py\n\u2502          \u251c\u2500\u2500 odejmowanie.py\n\u2502          \u2514\u2500\u2500 dzielenie.py\n\u251c\u2500\u2500 docs/\n\u2514\u2500\u2500 tests/\n</code></pre>"},{"location":"zaj04/pakiety/#pliki-__init__py","title":"Pliki <code>__init__.py</code>","text":"<p>Jak widzimy w przyk\u0142adowej strukturze powy\u017cej, ka\u017cdy katalog, kt\u00f3ry ma by\u0107 rozpoznawany jako cz\u0119\u015b\u0107 pakietu, posiada ten plik. Pocz\u0105tkowo, w starszych wersjach Pythona, ten plik by\u0142 obowi\u0105zkowy; obecnie w Pythonie 3.x nadal jest u\u017cywany, ale jego obecno\u015b\u0107 nie jest wymagana do rozpoznania katalogu jako pakietu. Jednak <code>__init__.py</code> nadal ma wa\u017cne funkcje:</p> <ul> <li>Inicjalizacja pakietu \u2013 plik <code>__init__.py</code> jest uruchamiany przy pierwszym importowaniu pakietu, wi\u0119c mo\u017cna w nim umie\u015bci\u0107 kod, kt\u00f3ry zostanie wykonany na pocz\u0105tku.</li> <li>Kontrolowanie import\u00f3w \u2013 mo\u017cemy zdefiniowa\u0107 list\u0119 <code>__all__</code> w <code>__init__.py</code>, aby kontrolowa\u0107, kt\u00f3re modu\u0142y zostan\u0105 zaimportowane, gdy u\u017cyjemy <code>from pakiet import *</code>.</li> </ul> <p>Przyk\u0142adowy plik <code>__init__.py</code> znajduj\u0105cy si\u0119 w <code>zaj\u0119cia01</code>:</p> <pre><code>__all__ = [\"dodawanie\", \"odejmowanie\"]\n</code></pre> <p>Dzi\u0119ki temu przy <code>from zajecia01 import *</code> zostan\u0105 zaimportowane tylko modu\u0142y <code>dodawanie</code> i <code>odejmowanie</code>, podczas gdy <code>dzielenie</code> zostanie pomini\u0119te.</p>"},{"location":"zaj04/pakiety/#importowanie-moduow","title":"Importowanie modu\u0142\u00f3w","text":"<p>Mamy 2 g\u0142\u00f3wne typy importu:</p> <ul> <li>Import bezwzgl\u0119dny \u2013 polega na podaniu pe\u0142nej \u015bcie\u017cki do modu\u0142u lub pakietu, np.:<ul> <li><code>from geoapps import *</code>,</li> <li><code>from geoapps.zajecia01 import dodawanie</code>,</li> <li><code>from geoapps.zajecia01.dodawanie import suma</code>,</li> <li><code>import geoapps.zajecia01.dodawanie as dod</code>.</li> </ul> </li> <li>Import wzgl\u0119dny \u2013 u\u017cywany jest wewn\u0105trz pakiet\u00f3w i bazuje na kropkach wiod\u0105cych:<ul> <li>Jedna kropka <code>.</code> oznacza bie\u017c\u0105cy pakiet.</li> <li>Dwie kropki <code>..</code> oznaczaj\u0105 pakiet nadrz\u0119dny.</li> </ul> </li> </ul> Danger <p>Import wzgl\u0119dny dzia\u0142a tylko wtedy, gdy jeste\u015bmy w kontek\u015bcie pakietu, np. podczas importowania modu\u0142\u00f3w wewn\u0105trz innego modu\u0142u tego samego pakietu.</p> Przyk\u0142ad - importowanie bezwzgl\u0119dne <pre><code>from geoapps.zajecia01 import dodawanie, odejmowanie\n\nprint(dodawanie.dodaj(5, 3))  # U\u017cycie funkcji dodaj z modu\u0142u dodawanie\nprint(odejmowanie.odejmij(5, 3))  # U\u017cycie funkcji odejmij z modu\u0142u odejmowanie\n</code></pre> Przyk\u0142ad - importowanie wzgl\u0119dne - WEWN\u0104TRZ PAKIETU <p>B\u0119d\u0105c w pliku <code>zajecia01/mnozenie.py</code></p> <pre><code>from .dodawanie import dodaj  # Import z bie\u017c\u0105cego pakietu\n\ndef mnoz(a, b):\n    wynik = 0\n    for _ in range(b):\n        wynik = dodaj(wynik, a)  # U\u017cycie funkcji dodaj\n    return wynik\n</code></pre>"},{"location":"zaj04/pakiety/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Stw\u00f3rz struktur\u0119 pakietu <code>geoapps</code> i przenie\u015b do niego stworzone do tej pory skrypty (z wszystkich zaj\u0119\u0107). Mo\u017cna u\u017cy\u0107 struktury z przyk\u0142adu, czyli subpakiety odpowiadaj\u0105ce konkretnym zaj\u0119ciom np. <code>zajecia01</code>.</p> <p>Tip</p> <p>Nie zapomnij doda\u0107 plik\u00f3w <code>__init__.py</code> wewn\u0105trz pakiet\u00f3w, a tak\u017ce opcjonalnie list <code>__all__</code> w tych plikach.</p> </li> <li> <p>Wykorzystuj\u0105c pakiet <code>geoapps</code>, stw\u00f3rz w g\u0142\u00f3wnym katalogu plik <code>run_geoapps.py</code>, zaimportuj do niego wybrane funkcje / klasy i wywo\u0142aj przyk\u0142adowy kod z ich u\u017cyciem.</p> </li> </ol>"},{"location":"zaj04/pakiety/#budowanie-pakietu","title":"Budowanie pakietu","text":""},{"location":"zaj04/pakiety/#plik-konfiguracyjny-pyprojecttoml","title":"Plik konfiguracyjny <code>pyproject.toml</code>","text":"<p>Plik <code>pyproject.toml</code> to centralne miejsce konfiguracji pakietu. Od 2020 roku jest to zalecany (i standardowy) format dla wszystkich narz\u0119dzi do budowania pakiet\u00f3w (zgodnie z PEP 517/518/621). Pozwala narz\u0119dziom jak <code>pip</code>, <code>build</code>, <code>twine</code> itp. rozpozna\u0107, jak zbudowa\u0107 i zainstalowa\u0107 pakiet.</p> Czy mo\u017cna u\u017cywa\u0107 czego\u015b innego ni\u017c <code>pyproject.toml</code>? <p>Tradycyjnie u\u017cywano pliku <code>setup.py</code>, a nast\u0119pnie dodano <code>setup.cfg</code> jako opcj\u0119 konfiguracji bezpo\u015bredniej w formacie <code>.ini</code>. Obecnie, mo\u017cliwa jest konfiguracja pakiet\u00f3w wy\u0142\u0105cznie za pomoc\u0105 <code>pyproject.toml</code>, kt\u00f3ry upraszcza zarz\u0105dzanie projektami w ca\u0142ym ekosystemie.</p> <p>W najnowszych wersjach <code>setuptools</code> wystarczy plik <code>pyproject.toml</code>, w poprzednich mog\u0105 by\u0107 wymagane inne / pozosta\u0142e.</p> <p>Wi\u0119cej szczeg\u00f3\u0142\u00f3w w dokumentacji setuptools.</p> <p>Plik <code>pyproject.toml</code> powinien si\u0119 znale\u017a\u0107 w g\u0142\u00f3wnym katalogu projektu.</p> <p>Zawarto\u015b\u0107 <code>pyproject.toml</code> - przechowuje szczeg\u00f3\u0142owe informacje o projekcie, takie jak nazwa, wersja, autor oraz wymagania dla systemu budowania pakietu.</p> <pre><code>[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"geoapps\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.10.0\"\ndescription = \"Pakiet z kodem z zaj\u0119\u0107\"\nauthors = [\n    { name = \"Jakub Staszel\", email = \"jstaszel@agh.edu.pl\" }\n]\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\nexclude = [\"docs\", \"tests\"]\n</code></pre>"},{"location":"zaj04/pakiety/#instalacja-pakietu-w-trybie-edytowalnym","title":"Instalacja pakietu w trybie edytowalnym","text":"<p>\u017beby mie\u0107 mo\u017cliwo\u015b\u0107 pracy na lokalnym pakiecie (ale ju\u017c wersji zdefiniowanej w <code>pyproject.toml</code> oraz bez uzale\u017cnienia od <code>sys.path</code>), wystarczy zainstalowa\u0107 pakiet w trybie edytowalnym za pomoc\u0105 <code>pip install -e .</code> w terminalu. Tworzone zmiany b\u0119d\u0105 widoczne od razu w Pythonie bez konieczno\u015bci reinstalacji pakietu.</p> To nie jest jedyna dopuszczalna struktura projektu! <p>Aktualnie <code>setuptools</code> wspiera automatyczne przeszukiwanie 2 typ\u00f3w struktur projekt\u00f3w, na tych zaj\u0119ciach stworzyli\u015bmy <code>flat-layout</code>, wi\u0119cej szczeg\u00f3\u0142\u00f3w tutaj.</p>"},{"location":"zaj04/pakiety/#zarzadzanie-zaleznosciami-pakietu","title":"Zarz\u0105dzanie zale\u017cno\u015bciami pakietu","text":"<p>Kiedy budujemy nasz pakiet lokalnie, proces budowy przebiega bez problem\u00f3w, poniewa\u017c wszystkie zale\u017cno\u015bci s\u0105 ju\u017c zainstalowane i dost\u0119pne w \u015brodowisku. W takim przypadku narz\u0119dzia takie jak <code>build</code> czy <code>setuptools</code> korzystaj\u0105 z tych zale\u017cno\u015bci lokalnie i poprawnie buduj\u0105 paczk\u0119.</p> <p>Po zbudowaniu pakietu sytuacja si\u0119 zmienia \u2013 u\u017cytkownicy, kt\u00f3rzy chc\u0105 zainstalowa\u0107 nasz pakiet, nie b\u0119d\u0105 mieli automatycznie dost\u0119pu do zale\u017cno\u015bci u\u017cywanych podczas jego budowy. Aby upewni\u0107 si\u0119, \u017ce u\u017cytkownicy b\u0119d\u0105 mogli poprawnie zainstalowa\u0107 ten pakiet, konieczne jest jasne okre\u015blenie jego zale\u017cno\u015bci runtime w pliku konfiguracyjnym projektu.</p> <p>I tak to np. mo\u017ce wygl\u0105da\u0107 w pliku <code>pyproject.toml</code>:</p> <pre><code>[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"moj_pakiet\"\nversion = \"1.0.0\"\ndescription = \"Przyk\u0142ad pakietu\"\ndependencies = [\n    \"numpy&gt;=1.21.0,&lt;2.0.0\",\n    \"pandas&gt;=1.3.0\",\n]\n</code></pre>"},{"location":"zaj04/pakiety/#wersjonowanie-pakietow","title":"Wersjonowanie pakiet\u00f3w","text":"<p>Wersjonowanie to proces przypisywania numeru wersji do konkretnego stanu projektu. Dzi\u0119ki temu mo\u017cemy jasno komunikowa\u0107 co si\u0119 zmieni\u0142o, czy wersja jest stabilna oraz czy aktualizacja wp\u0142ywa na kompatybilno\u015b\u0107 z innymi projektami.</p> <p>Dobrze prowadzone wersjonowanie pozwala zachowa\u0107 porz\u0105dek w historii zmian, umo\u017cliwi\u0107 instalacj\u0119 konkretnej wersji (np. do test\u00f3w) i unikn\u0105\u0107 b\u0142\u0119d\u00f3w wynikaj\u0105cych z nieoczekiwanych zmian w kodzie.</p>"},{"location":"zaj04/pakiety/#konwencja-semver-semantic-versioning","title":"Konwencja SemVer (Semantic Versioning)","text":"<p>Najcz\u0119\u015bciej stosowan\u0105 konwencj\u0105 jest Semantic Versioning, czyli:</p> <pre><code>MAJOR.MINOR.PATCH\n</code></pre> <p>Szczeg\u00f3\u0142y:</p> <ul> <li>MAJOR (np. 2.0.0) - zmiany niekompatybilne z poprzednimi wersjami (np. usuni\u0119cie lub zmiana dzia\u0142ania funkcji),</li> <li>MINOR (np. 1.3.0) - nowe funkcje, ale kompatybilne z poprzednimi wersjami.</li> <li>PATCH (np. 1.3.2) - poprawki b\u0142\u0119d\u00f3w, bez dodawania nowych funkcji.</li> </ul> <p>Przyk\u0142ad rozwoju wersji:</p> <ul> <li>0.1.0 \u2013 wst\u0119pna wersja rozwojowa,</li> <li>0.2.0 \u2013 dodano nowe funkcje,</li> <li>0.2.1 \u2013 poprawki b\u0142\u0119d\u00f3w,</li> <li>1.0.0 \u2013 pierwsza stabilna wersja,</li> <li>2.0.0 \u2013 du\u017ca zmiana, niekompatybilna z 1.x.</li> </ul>"},{"location":"zaj04/pakiety/#budowanie-pakietu_1","title":"Budowanie pakietu","text":"<p>Budowanie pakietu to process tworzenia dystrybucji kodu, kt\u00f3ra mo\u017ce by\u0107 zainstalowana przez innych u\u017cytkownik\u00f3w lub na r\u00f3\u017cnych maszynach. W Pythonie u\u017cywa si\u0119 narz\u0119dzi takich jak <code>setuptools</code> i <code>wheel</code>, aby stworzy\u0107 gotow\u0105 paczk\u0119 w formatach <code>.whl</code> (wheel) i <code>.tar.gz</code> (source distribution).</p> <p>Aby zbudowa\u0107 pakiet wystarczy mie\u0107 zainstalowany pakiet <code>build</code> (dokumentacja), a nast\u0119pnie uruchomi\u0107 go poprzez <code>python -m build</code>.</p> <p>Paczka zbudowana zostanie w wersji zgodnej z <code>pyproject.toml</code>, nale\u017cy najpierw zaktualizowa\u0107 ten plik!</p> <pre><code>pip install build\npython -m build\n</code></pre> <p>Pliki powinny zosta\u0107 stworzone w folderze <code>dist</code>:</p> <ul> <li><code>.tar.gz</code> \u2013 klasyczna paczka \u017ar\u00f3d\u0142owa,</li> <li><code>.whl</code> (wheel) \u2013 zoptymalizowana binarna paczka do szybkiej instalacji.</li> </ul> Co to jest <code>wheel</code>? <p>Wheel to nowoczesny format paczek dla Pythona (rozszerzenie .whl).</p> <p>Zalety: - szybka instalacja bez potrzeby kompilacji, - lepsze wsparcie dla CI/CD i instalacji zale\u017cno\u015bci systemowych, - obs\u0142uga zale\u017cno\u015bci i metadanych.</p> <p>Instalacja pliku <code>.whl</code>:</p> <pre><code>pip install &lt;dist&gt;/geoapps-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"zaj04/pakiety/#publikowanie-pakietu","title":"Publikowanie pakietu","text":"<p>Publikacja pakietu to kluczowy krok w procesie udost\u0119pnienia oprogramowania innym u\u017cytkownikom, zespo\u0142om lub ca\u0142ej spo\u0142eczno\u015bci. Udost\u0119pniaj\u0105c pakiet, umo\u017cliwiamy jego \u0142atw\u0105 instalacj\u0119, aktualizacj\u0119 i wykorzystanie w innych projektach. Process publikacji zale\u017cy od repozytorium pakiet\u00f3w, na kt\u00f3rym chcemy opublikowa\u0107 pakiet, a tak\u017ce od tego, czy nasz pakiet jest przeznaczony do u\u017cytku prywatnego, publicznego, czy specjalistycznego.</p>"},{"location":"zaj04/pakiety/#platformy-do-dystrybucji-pakietow","title":"Platformy do dystrybucji pakiet\u00f3w","text":""},{"location":"zaj04/pakiety/#pypi","title":"PyPI","text":"<p>Jest domy\u015bln\u0105 i najcz\u0119\u015bciej u\u017cywan\u0105 platform\u0105. Pozwala na \u0142atw\u0105 instalacj\u0119 pakiet\u00f3w za pomoc\u0105 <code>pip</code> oraz ich aktualizacj\u0119.</p> <p>Instalacja dost\u0119pnego tam pakietu: <code>pip install &lt;nazwa_pakietu&gt;</code>.</p>"},{"location":"zaj04/pakiety/#conda-forge","title":"conda-forge","text":"<p>Platforms do dystrybucji pakiet\u00f3w oparta na systemie Conda, kt\u00f3ry wspiera pakiety Python i nie tylko. Conda-Forge to spo\u0142eczno\u015bciowe repozytorium, kt\u00f3re umo\u017cliwia tworzenie i publikowanie pakiet\u00f3w w szerokiej gamie j\u0119zyk\u00f3w programowania.</p> <p>Instalacja dost\u0119pnego tam pakietu: <code>conda install -c conda-forge &lt;nazwa_pakietu&gt;</code>.</p> <p>Wymaga Conda do zarz\u0105dzania.</p>"},{"location":"zaj04/pakiety/#github-packages","title":"GitHub Packages","text":"<p>Platforms dystrybucji zintegrowana bezpo\u015brednio z GitHub, co umo\u017cliwia publikacj\u0119 pakiet\u00f3w obok kodu \u017ar\u00f3d\u0142owego i integracj\u0119 z GitHub Actions.</p> <p>Instalacja dost\u0119pnego tam pakietu: w zale\u017cno\u015bci od konfiguracji <code>pip install</code> lub <code>conda install</code>.</p>"},{"location":"zaj04/pakiety/#inne","title":"Inne","text":"<ul> <li>Anaconda Cloud</li> <li>Artifactory</li> <li>PyPI Pro</li> <li>Docker Hub</li> </ul>"},{"location":"zaj04/pakiety/#publikowanie-pakietu_1","title":"Publikowanie pakietu","text":"<p>Na przyk\u0142adzie GitHub. Zak\u0142adaj\u0105c, \u017ce wszystkie nasze zmiany, kt\u00f3re maj\u0105 by\u0107 cz\u0119\u015bci\u0105 opublikowanej wersji s\u0105 ju\u017c na g\u0142\u00f3wnej ga\u0142\u0119zi, pozostaje nam dodanie taga:</p> <pre><code># tagi chcemy dodawa\u0107 na g\u0142\u00f3wnej ga\u0142\u0119zi\ngit checkout main\ngit pull origin main\n\n# dodanie taga zgodnego z wersj\u0105 w pyproject.toml\ngit tag v0.1.0\ngit push origin v0.1.0\n</code></pre> Czym s\u0105 <code>git tags</code>? <p>Git tagi to specjalne \"etykiety\" przypinane do konkretnych commit\u00f3w, najcz\u0119\u015bciej s\u0142u\u017c\u0105ce do oznaczania wersji projektu (np. v1.0.0, v2.1.3). W odr\u00f3\u017cnieniu od branchy, tagi s\u0105 niezmienne \u2013 raz przypisane do commita, pozostaj\u0105 z nim zwi\u0105zane na sta\u0142e (chyba \u017ce zostan\u0105 usuni\u0119te i utworzone ponownie). Tagi s\u0105 kluczowe w cyklu wydawniczym: pozwalaj\u0105 budowa\u0107 i publikowa\u0107 wersje paczek, tworzy\u0107 release\u2019y na GitHubie, a tak\u017ce odtwarza\u0107 stan repozytorium z momentu konkretnego wydania. Opr\u00f3cz wersjonowania, tag\u00f3w mo\u017cna u\u017cywa\u0107 r\u00f3wnie\u017c do: oznaczania wa\u017cnych punkt\u00f3w w historii (np. \"pierwsza wersja prototypu\"), tworzenia snapshot\u00f3w do analizy, czy wskazywania milestone\u2019\u00f3w w pracy zespo\u0142owej. S\u0105 lekkie, czytelne i dobrze wspierane przez narz\u0119dzia CI/CD.</p>"},{"location":"zaj04/pakiety/#manualnie","title":"Manualnie","text":"<p>Tego nie robimy, wykonamy zautomatyzowan\u0105 wersj\u0119!</p> <p>Opublikowa\u0107 pakiety mo\u017cemy za pomoc\u0105 release w GitHub UI, poprzez zak\u0142adk\u0119 Releases. To narz\u0119dzie zadba o zbudowanie plik\u00f3w dla paczki.</p>"},{"location":"zaj04/pakiety/#automatycznie","title":"Automatycznie","text":"<p>Za pomoc\u0105 workflow w GitHub Actions <code>./.github/workflows/release.yml</code> wykonujemy wszystkie kroki, czyli zbudowanie pakietu oraz opublikowanie.</p> <p>Po tym, po wej\u015bciu na repozytorium zdalne, powinni\u015bmy widzie\u0107 status workflow oraz gotowy release.</p> <p></p>"},{"location":"zaj04/pakiety/#wykorzystanie-pakietu","title":"Wykorzystanie pakietu","text":"<p>Teraz inni u\u017cytkownicy b\u0119d\u0105 mogli korzysta\u0107 z konkretnych wersji pakietu. W przypadku GitHub, za pomoc\u0105 komendy:</p> <pre><code>pip install https://github.com/eo-agh/geoapps-python-course/releases/download/v0.1.0/geoapps-0.1.0-py3-none-any.whl\n</code></pre> <p>Oraz odpowiednio innych dla PyPI czy conda-forge (w zale\u017cno\u015bci od tego gdzie publikujemy pakiet).</p>"},{"location":"zaj04/pakiety/#zadania_1","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Stw\u00f3rz w g\u0142\u00f3wnym katalogu projektu plik <code>pyproject.toml</code> i wype\u0142nij go odpowiedni\u0105 tre\u015bci\u0105 u\u017cywaj\u0105c dokumentacji i przyk\u0142adu konfiguracji.</li> <li>Zainstaluj sw\u00f3j zdefiniowany pakiet w trybie edytowalnym (<code>pip install -e .</code>).</li> <li>Opublikuj pierwsz\u0105 wersj\u0119 pakietu w GitHub Packages w spos\u00f3b zautomatyzowany.</li> </ol> Uwaga <p>Po zainstalowaniu pakietu w wersji edytowalnej powinni\u015bmy mie\u0107 mo\u017cliwo\u015b\u0107 importowania za pomoc\u0105 <code>from geoapps import *</code> w spos\u00f3b bezwzgl\u0119dny, czyli bez wzgl\u0119du na lokalizacj\u0119 skryptu. Mo\u017cna to przetestowa\u0107 przenosz\u0105\u0107 tymczasowo <code>main_zajecia03.py</code> do folderu <code>tests</code>.</p>"},{"location":"zaj04/zasiegi/","title":"\ud83e\uddf0 Zasi\u0119gi","text":"<p>Zasi\u0119g (ang. scope) okre\u015bla, gdzie dana zmienna lub funkcja jest widoczna i dost\u0119pna. Zasady te pomagaj\u0105 w organizacji kodu oraz unikni\u0119ciu b\u0142\u0119d\u00f3w wynikaj\u0105cych z konflikt\u00f3w nazw.</p> <p>G\u0142\u00f3wne zasady zarz\u0105dzania zasi\u0119giem opieraj\u0105 si\u0119 na regule LEGB oraz specjalnych instrukcjach <code>global</code> i <code>nonlocal</code>.</p>"},{"location":"zaj04/zasiegi/#przypisane-nazwy-sa-lokalne","title":"Przypisane nazwy s\u0105 lokalne","text":"<p>Kiedy przypisujemy warto\u015b\u0107 zmiennej w funkcji, staje si\u0119 ona lokalna dla tej funkcji. Oznacza to, \u017ce poza t\u0105 funkcj\u0105 nie b\u0119dzie widoczna.</p> <pre><code>def funkcja():\n    x = 10  # Zmienna lokalna, widoczna tylko w funkcji\n    print(x)\n\nfunkcja()  # Wy\u015bwietli 10\n\n# Natomiast taka operacja nie ma ju\u017c sensu, zmienna x\n# istnieje tylko wewnatrz funkcji\nprint(x)\n</code></pre>"},{"location":"zaj04/zasiegi/#regua-legb","title":"Regu\u0142a LEGB","text":"<p>Regu\u0142a ta okre\u015bla w jakiej kolejno\u015bci Python wyszukuje zmienne i funkcje, gdy napotka na nie w kodzie. Jest to wa\u017cne, poniewa\u017c pozwala programi\u015bcie zrozumie\u0107, sk\u0105d Python pobiera warto\u015b\u0107 zmiennej, zw\u0142aszcza gdy zmienne o tej samej nazwie wyst\u0119puj\u0105 w r\u00f3\u017cnych zakresach (np. wewn\u0105trz funkcji, w funkcjach zagnie\u017cd\u017conych, w skrypcie globalnym).</p> <p>LEGB to akronim od 4 typ\u00f3w zasi\u0119g\u00f3w, przez kt\u00f3re Python przechodzi w nast\u0119puj\u0105cej kolejno\u015bci:</p> <ol> <li>Local - zmienne zadeklarowane w bie\u017c\u0105cej funkcji lub wewn\u0119trznej funkcji (najbardziej wewn\u0119trzny zasi\u0119g).</li> <li>Enclosing - zmienne zadeklarowane w zewn\u0119trznej funkcji, je\u015bli funkcje s\u0105 zagnie\u017cd\u017cone.</li> <li>Global - zmienne deklarowane w skrypcie g\u0142\u00f3wnym, poza funkcjami, czyli na poziomie modu\u0142u.</li> <li>Built-in - zmienne i funkcje wbudowane, dost\u0119pne globalnie (np. print, len).</li> </ol> <pre><code># W danym skrypcie / w danym module x jest\n# zmienn\u0105 globaln\u0105\nx = \"global\"\n\ndef zewnetrzna():\n    x = \"enclosing\"\n\n    # Tak, funkcje mog\u0105 by\u0107 zagnie\u017cd\u017cone\n    def wewnetrzna():\n        x = \"local\"\n        print(x)  # Wydrukuje \"local\", bo najpierw przeszukuje lokalne zmienne\n    wewnetrzna()\n    print(x)  # Wydrukuje \"enclosing\"\n\nzewnetrzna()\nprint(x)  # Wydrukuje \"global\"\n</code></pre>"},{"location":"zaj04/zasiegi/#instrukcje-global-i-nonlocal","title":"Instrukcje <code>global</code> i <code>nonlocal</code>","text":"<ul> <li><code>global</code> - pozwala zadeklarowa\u0107 zmienn\u0105 globaln\u0105 w funkcji, zmieniaj\u0105c jej warto\u015b\u0107 globalnie.</li> <li><code>nonlocal</code> - umo\u017cliwia przypisanie warto\u015bci do zmiennej z otaczaj\u0105cego zakresu (nie globalnego), co przydaje si\u0119 w funkcjach zagnie\u017cd\u017conych.</li> </ul> <p>Przyk\u0142ad u\u017cycia <code>global</code>:</p> <pre><code>y = 5\n\ndef zmien_globalne():\n    global y\n    y = 10\n\nzmien_globalne()\nprint(y)  # Wydrukuje 10\n# Gdyby nie zastosowanie instrukcji global to y by\u0142oby\n# dalej r\u00f3wne 5, bo r\u00f3wne 10 by\u0142oby jedynie lokalnie w funkcji\n</code></pre> <p>Przyk\u0142ad u\u017cycia <code>nonlocal</code>:</p> <pre><code>def zewnetrzna():\n    x = \"original\"\n\n    def wewnetrzna():\n        nonlocal x\n        x = \"modified\"\n\n    wewnetrzna()\n    print(x)  # Wydrukuje \"modified\"\n    # Pomimo tego, \u017ce x zosta\u0142o zmodyfikowane jedynie\n    # wewn\u0105trz funkcji zagnie\u017cd\u017conej\n\nzewnetrzna()\n</code></pre>"},{"location":"zaj04/zasiegi/#funkcje-zagniezdzone-funkcje-fabrykujace","title":"Funkcje zagnie\u017cd\u017cone, funkcje fabrykuj\u0105ce","text":"<p>Funkcje zagnie\u017cd\u017cone (ang. nested functions) to po prostu funkcje zdefiniowanie wewn\u0105trz innych funkcji. Mog\u0105 by\u0107 tak\u017ce wywo\u0142ywane wewn\u0105trz, ale nie tylko, bo mog\u0105 by\u0107 r\u00f3wnie\u017c zwracane, u\u017cywane jako argument czy by\u0107 prywatnymi funkcjami pomocniczymi.</p> Przyk\u0142ady dla funkcji zagnie\u017cd\u017conych <p>Wywo\u0142anie funkcji wewn\u0105trz:</p> <pre><code>def zewnetrzna(x):\n    def wewnetrzna(y):\n        return x + y\n    # Funkcja wewnetrzna jest dost\u0119pna tylko w zewnetrzna\n    return wewnetrzna(x)\n\nprint(zewnetrzna(5))  # Wydrukuje 10\nprint(wewnetrzna(3))  # Spowoduje b\u0142\u0105d, bo wewnetrzna nie jest dost\u0119pna poza zewnetrzna\n</code></pre> <p>U\u017cycie funkcji zagnie\u017cd\u017conej jako funkcji fabrykuj\u0105cej:</p> <pre><code>def funkcja_fabrykujaca(wiadomosc):\n    def funkcja_zagniezdzona():\n        return f\"Twoja wiadomo\u015b\u0107 to: {wiadomosc}\"\n    return funkcja_zagniezdzona\n\n# Tworzymy now\u0105 funkcj\u0119, kt\u00f3ra pami\u0119ta \"wiadomosc\"\nnowa_funkcja = funkcja_fabrykujaca(\"Witaj, \u015bwiecie!\")\nprint(nowa_funkcja())  # Wydrukuje \"Twoja wiadomo\u015b\u0107 to: Witaj, \u015bwiecie!\"\n</code></pre> <p>Przekazanie funkcji zagnie\u017cd\u017conej jako argument:</p> <pre><code>def obliczenia(operator):\n    def dodaj(x, y):\n        return x + y\n\n    def mnoz(x, y):\n        return x * y\n\n    # Zwracamy funkcj\u0119 zagnie\u017cd\u017con\u0105 w zale\u017cno\u015bci od operatora\n    if operator == \"dodaj\":\n        return dodaj\n    elif operator == \"mnoz\":\n        return mnoz\n    else:\n        raise ValueError(\"Nieznany operator\")\n\n# Teraz mamy funkcj\u0119 dodaj i mnoz dost\u0119pn\u0105 spoza obliczenia\nwybrana_funkcja = obliczenia(\"dodaj\")\nprint(wybrana_funkcja(2, 3))  # Wydrukuje 5\n\nwybrana_funkcja = obliczenia(\"mnoz\")\nprint(wybrana_funkcja(2, 3))  # Wydrukuje 6\n</code></pre> <p>Tworzenie prywatnych funkcji pomocniczych:</p> <pre><code>def przetwarzaj_dane(lista):\n    def filtruj(x):\n        return x % 2 == 0\n\n    def kwadrat(x):\n        return x ** 2\n\n    przefiltrowane = filter(filtruj, lista)\n    return [kwadrat(x) for x in przefiltrowane]\n\nprint(przetwarzaj_dane([1, 2, 3, 4, 5, 6]))  # Wydrukuje [4, 16, 36]\n</code></pre> <p>Funkcje fabrykuj\u0105ce (ang. factory functions) s\u0105 wi\u0119c jednym z typ\u00f3w funkcji zagnie\u017cd\u017conych, gdzie zwracana jest funkcja wewn\u0119trzna. Funkcje fabrykuj\u0105ce wykorzystuj\u0105 zamkni\u0119cia, co oznacza, \u017ce funkcje, kt\u00f3re zwracaj\u0105, pami\u0119taj\u0105 kontekst, w kt\u00f3rym zosta\u0142y stworzone (np. warto\u015bci zmiennych z zakresu otaczaj\u0105cego). To pozwala im zachowa\u0107 stan, co czyni je bardzo przydatnymi do tworzenia funkcji z predefiniowanymi ustawieniami lub konfiguracjami.</p> Przyk\u0142ady dla funkcji zagnie\u017cd\u017conych <p>Predefiniowanie parametr\u00f3w:</p> <pre><code>def mnoznik(factor):\n    def pomnoz(x):\n        return x * factor\n    return pomnoz  # Zwracamy now\u0105 funkcj\u0119\n\n# Tworzymy now\u0105 funkcj\u0119 z zapami\u0119tanym \"factor\"\npomnoz_2 = mnoznik(2)\npomnoz_3 = mnoznik(3)\n\nprint(pomnoz_2(5))  # Wydrukuje 10 (5 * 2)\nprint(pomnoz_3(5))  # Wydrukuje 15 (5 * 3)\n</code></pre> <p>Liczniki:</p> <pre><code>def licznik():\n    count = 0\n\n    def zwieksz():\n        nonlocal count\n        count += 1\n        return count\n\n    return zwieksz\n\nlicznik1 = licznik()\nlicznik2 = licznik()\n\nprint(licznik1())  # Wydrukuje 1\nprint(licznik1())  # Wydrukuje 2\nprint(licznik2())  # Wydrukuje 1 (nowy licznik)\n</code></pre> <p>Konfiguracje w ramach wzorca fabrykuj\u0105cego:</p> <pre><code>def formatuj_text(style):\n    def formatuj(wiadomosc):\n        if style == \"uppercase\":\n            return wiadomosc.upper()\n        elif style == \"lowercase\":\n            return wiadomosc.lower()\n        elif style == \"capitalize\":\n            return wiadomosc.capitalize()\n        else:\n            return wiadomosc\n    return formatuj\n\nuppercase_formatter = formatuj_text(\"uppercase\")\nlowercase_formatter = formatuj_text(\"lowercase\")\n\nprint(uppercase_formatter(\"hello world\"))  # Wydrukuje \"HELLO WORLD\"\nprint(lowercase_formatter(\"HELLO WORLD\"))  # Wydrukuje \"hello world\"\n</code></pre> <p>Walidatory:</p> <pre><code>def walidator_dlugosci(min_dlugosc, max_dlugosc):\n    def waliduj(text):\n        return min_dlugosc &lt;= len(text) &lt;= max_dlugosc\n    return waliduj\n\nmaly_tekst = walidator_dlugosci(1, 5)\nduzy_tekst = walidator_dlugosci(5, 10)\n\nprint(maly_tekst(\"Hi\"))       # Wydrukuje True\nprint(maly_tekst(\"HelloWorld\"))  # Wydrukuje False\nprint(duzy_tekst(\"Python\"))    # Wydrukuje True\n</code></pre> <p>Funkcje z\u0142o\u017conych oblicze\u0144:</p> <pre><code>def procent_calculator(procent):\n    def oblicz(calkowita_kwota):\n        return calkowita_kwota * (procent / 100)\n    return oblicz\n\npodatek_vat = procent_calculator(23)\nzysk_kapitalowy = procent_calculator(19)\n\nprint(podatek_vat(1000))  # Wydrukuje 230.0\nprint(zysk_kapitalowy(1000))  # Wydrukuje 190.0\n</code></pre> <p>Z\u0142o\u017cone filtry i sortowania:</p> <pre><code>def filtruj_po_min_wartosci(min_wartosc):\n    def filtruj(lista):\n        return [x for x in lista if x &gt;= min_wartosc]\n    return filtruj\n\nfiltruj_od_10 = filtruj_po_min_wartosci(10)\n\nprint(filtruj_od_10([5, 10, 15, 20]))  # Wydrukuje [10, 15, 20]\n</code></pre>"},{"location":"zaj04/zasiegi/#zadania","title":"\ud83d\udcdd Zadania","text":"<ol> <li>Napisz funkcj\u0119 fabrykuj\u0105c\u0105 <code>stworz_funkcje_potegujaca(wykladnik)</code>, kt\u00f3ra przyjmuje jeden argument: wyk\u0142adnik pot\u0119gi. Zwracana przez ni\u0105 funkcja zagnie\u017cd\u017cona <code>poteguj(podstawa)</code> powinna r\u00f3wnie\u017c przyjmowa\u0107 jeden argument \u2013 podstaw\u0119 pot\u0119gi \u2013 i zwraca\u0107 wynik podniesienia tej podstawy do pot\u0119gi okre\u015blonej przez wyk\u0142adnik przekazany do funkcji zewn\u0119trznej.</li> </ol> <p>Tip</p> <p>Wywo\u0142anie takiej funkcji i sprawdzenie powinno wygl\u0105da\u0107 nast\u0119puj\u0105co:</p> <pre><code>potega_2 = stworz_funkcje_potegujaca(2)`  # Tworzy funkcj\u0119 pot\u0119guj\u0105c\u0105 do kwadratu\nprint(potega_2(4))  # Wynik: 16\n</code></pre>"},{"location":"zaj04/zasiegi/#zachowanie-stanu","title":"Zachowanie stanu","text":"<p>Jako praktyczny przyk\u0142ad dla zaawansowanego wykorzystania zasi\u0119g\u00f3w.</p> <p>Zachowanie stanu staje si\u0119 przydatne szczeg\u00f3lnie w przypadku potrzeby utrzymania danych pomi\u0119dzy kolejnymi wywo\u0142aniami funkcji lub fragmentami kodu.</p> <p>Za przyk\u0142ad pos\u0142u\u017cy nam <code>accumulator</code>, kt\u00f3ry zbiera\u0107 b\u0119dzie liczby dodawane w kolejnych wywo\u0142aniach funkcji. Po ka\u017cdym dodaniu chcemy mie\u0107 mo\u017cliwo\u015b\u0107 pobrania aktualnej sumy. Poni\u017cej ro\u017cne przyk\u0142ady implementacyjne:</p> U\u017cycie zmiennej <code>nonlocal</code> <pre><code>def akumulator_nonlocal():\n    suma = 0\n\n    def dodaj_wartosc(wartosc):\n        nonlocal suma\n        suma += wartosc\n        return suma\n\n    return dodaj_wartosc\n\n# Przyk\u0142ad u\u017cycia\nakum = akumulator_nonlocal()\nprint(akum(5))  # Wydrukuje 5\nprint(akum(10))  # Wydrukuje 15\n</code></pre> U\u017cycie zmiennej <code>global</code> <p>Zmienne <code>global</code> pozwalaj\u0105 na dost\u0119p i modyfikacj\u0119 zmiennych globalnych wewn\u0105trz funkcji. To podej\u015bcie jest rzadziej stosowane, gdy\u017c zmienne globalne s\u0105 widoczne w ca\u0142ym module, co mo\u017ce prowadzi\u0107 do b\u0142\u0119d\u00f3w, ale w niekt\u00f3rych sytuacjach mo\u017ce si\u0119 przyda\u0107.</p> <pre><code>suma_global = 0\n\ndef dodaj_do_akumulatora(wartosc):\n    global suma_global\n    suma_global += wartosc\n    return suma_global\n\n# Przyk\u0142ad u\u017cycia\nprint(dodaj_do_akumulatora(5))   # Wydrukuje 5\nprint(dodaj_do_akumulatora(10))  # Wydrukuje 15\n</code></pre> U\u017cycie klasy <p>Co prawda klasy b\u0119d\u0105 dopiero na przysz\u0142ych zaj\u0119ciach, ale s\u0105 jednym z najcz\u0119stszych sposob\u00f3w zarz\u0105dzania stanem. Instancje klas pozwalaj\u0105 na \u0142atwe tworzenie i przechowywanie danych w atrybutach.</p> <pre><code>class Accumulator:\n    def __init__(self):\n        self.suma = 0\n\n    def dodaj(self, wartosc):\n        self.suma += wartosc\n        return self.suma\n\n# Przyk\u0142ad u\u017cycia\nakum = Accumulator()\nprint(akum.dodaj(5))   # Wydrukuje 5\nprint(akum.dodaj(10))  # Wydrukuje 15\n</code></pre> U\u017cycie atrybutu funkcji <pre><code>def akumulator_funkcyjny(wartosc):\n    akumulator_funkcyjny.suma += wartosc\n    return akumulator_funkcyjny.suma\n\n# Inicjalizacja atrybutu funkcji\nakumulator_funkcyjny.suma = 0\n\n# Przyk\u0142ad u\u017cycia\nprint(akumulator_funkcyjny(5))   # Wydrukuje 5\nprint(akumulator_funkcyjny(10))  # Wydrukuje 15\n</code></pre>"},{"location":"zaj04/zasiegi/#zadania_1","title":"\ud83d\udcdd Zadania","text":"<ol> <li> <p>Napisz funkcj\u0119 <code>licznik()</code>, kt\u00f3ra za ka\u017cdym razem, gdy jest wywo\u0142ywana, zwi\u0119ksza swoje wewn\u0119trzne liczenie o jeden (licznik stanu). Zaimplementuj cztery wersje tej funkcji, wykorzystuj\u0105c:</p> <ul> <li> <p>Zmienn\u0105 <code>nonlocal</code> w zagnie\u017cd\u017conej funkcji</p> </li> <li> <p>Zmienn\u0105 <code>global</code></p> </li> <li> <p>Klas\u0119 z atrybutem instancji - wskaz\u00f3wka: zaimplementowanie w klasie funkcji <code>__init__</code> oraz <code>__call__</code></p> </li> <li> <p>Atrybut funkcji - funkcja, jak ka\u017cdy inny obiekt, mo\u017ce mie\u0107 swoje atrybuty</p> </li> </ul> </li> </ol>"}]}